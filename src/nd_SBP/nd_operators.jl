###############################################################################
# Contains functions to implement the n-dimensional version of the SBP method #
###############################################################################
"""
Function to obtain the jump matrix corresponding to the normal vector
"""
function jump(m::Int64, ùêß::AbstractVecOrMat{Int64}; X=[1])
  BH = [-(X ‚äó kron(N2S(E1(m,m,m), E1(1,1,m), I(m)).(ùêß)...))  (X ‚äó kron(N2S(E1(m,1,m), E1(1,m,m), I(m)).(ùêß)...)); 
        -(X ‚äó kron(N2S(E1(1,m,m), E1(m,1,m), I(m)).(ùêß)...))  (X ‚äó kron(N2S(E1(1,1,m), E1(m,m,m), I(m)).(ùêß)...))]
  BT = [-(X ‚äó kron(N2S(E1(m,m,m), E1(1,1,m), I(m)).(ùêß)...))  (X ‚äó kron(N2S(E1(m,1,m), E1(1,m,m), I(m)).(ùêß)...)); 
        (X ‚äó kron(N2S(E1(1,m,m), E1(m,1,m), I(m)).(ùêß)...))  -(X ‚äó kron(N2S(E1(1,1,m), E1(m,m,m), I(m)).(ùêß)...))]
  BH, BT
end

"""
A Dictionary to establish the correspondence between the normal and the grid points
"""
N2S(x,y,z) = Dict([(0,z), (1,x), (-1,y)])
(d::Dict)(k) = d[k];

"""
Surface Jacobian matrix
"""
function _surface_jacobian(qr, Œ©, ùêß::AbstractVecOrMat{Int64}; X=[1])  
  m = size(qr,1)
  n(x) = reshape(Float64.(ùêß), (length(ùêß),1))
  nqr = n.(qr)
  Jqr = (det‚àòJ).(qr, Œ©).*J‚Åª¬π.(qr, Œ©)
  J_on_grid = spdiagm.(vec.(get_property_matrix_on_grid(Jqr, length(ùêß))))
  n_on_grid = spdiagm.(vec.(get_property_matrix_on_grid(nqr, length(ùêß))))  
  n2s = kron(N2S(E1(m,m,m), E1(1,1,m), sparse(I(m))).(ùêß)...)
  Jn_on_grid = ((J_on_grid)*(n_on_grid));
  X‚äósqrt.(sum([(Ji*n2s) for Ji in Jn_on_grid].^2))
end

"""
Function to compute the jump with non-conforming interfaces
"""
function jump(m‚ÇÅ::Int64, m‚ÇÇ::Int64, ùêß::AbstractVecOrMat{Int64}, qr‚ÇÅ, qr‚ÇÇ, Œ©‚ÇÅ, Œ©‚ÇÇ; X=[1])
  @assert length(ùêß)==2 "Only Inpterpolation on 2d grids implemented for now"
  NC = min(m‚ÇÅ, m‚ÇÇ)  
  NF = 2*NC-1
  (m‚ÇÅ==NC) && @assert m‚ÇÇ == NF  "The coarse:fine ratio should be 1/2"
  (m‚ÇÇ==NC) && @assert m‚ÇÅ == NF  "The coarse:fine ratio should be 1/2"
  @assert size(qr‚ÇÅ) == Tuple(m‚ÇÅ*ones(length(ùêß))) "Check the input grid size qr‚ÇÅ"
  @assert size(qr‚ÇÇ) == Tuple(m‚ÇÇ*ones(length(ùêß))) "Check the input grid size qr‚ÇÇ"
  C2F, F2C = INTERPOLATION_4(NC) 
  J‚ÇÅ = spdiagm(((SJ(qr‚ÇÅ, Œ©‚ÇÅ, ùêß; X=[1]) |> diag).nzval).^(0.5))
  J‚ÇÇ = spdiagm(((SJ(qr‚ÇÇ, Œ©‚ÇÇ, -ùêß; X=[1]) |> diag).nzval).^(0.5))
  coarse_or_fine_points = N2S(NF, NC, NC)
  (m‚ÇÅ == NC) && (coarse_or_fine_interpolation = N2S(J‚ÇÇ\(C2F*J‚ÇÅ), J‚ÇÅ\(F2C*J‚ÇÇ), J‚ÇÅ\(F2C*J‚ÇÇ)))
  (m‚ÇÇ == NC) && (coarse_or_fine_interpolation = N2S(J‚ÇÅ\(C2F*J‚ÇÇ), J‚ÇÇ\(F2C*J‚ÇÅ), J‚ÇÇ\(F2C*J‚ÇÅ)))
  W‚ÇÅ = (X ‚äó kron(N2S(E1(NF,NF,(NF,NF)), E1(1,1,(NC,NC)), sparse(I(coarse_or_fine_points.(ùêß |> sum)))).(ùêß)...))
  Z‚ÇÅ = (X ‚äó kron(N2S(E1(NF,1,(NF,NC)), E1(1,NF,(NC,NF)), coarse_or_fine_interpolation.(ùêß |> sum)).(ùêß)...))
  W‚ÇÇ = (X ‚äó kron(N2S(E1(NC,NC,(NC,NC)), E1(NF,NF,(NF,NF)), sparse(I(coarse_or_fine_points.(-ùêß |> sum)))).(ùêß)...))
  Z‚ÇÇ = (X ‚äó kron(N2S(E1(1,NF,(NC,NF)), E1(NF,1,(NF,NC)), coarse_or_fine_interpolation.(-ùêß |> sum)).(ùêß)...))
  BH = [-W‚ÇÅ   Z‚ÇÅ;   -Z‚ÇÇ   W‚ÇÇ]
  BT = [-W‚ÇÅ   Z‚ÇÅ;   Z‚ÇÇ   -W‚ÇÇ]
  BH, BT
end