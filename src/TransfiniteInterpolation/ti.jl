struct domain_2d
    left::Function
    bottom::Function
    right::Function
    top::Function
    intersection_points::NTuple{4,AbstractVector{Float64}}
end

"""
Function to compute the intersection point of two curves 
"""
function compute_intersection_points(a, b; guess=[0.0,0.0])
    @inline function f!(F,x)
        F[1] = a(x[1])[1] - b(x[2])[1]
        F[2] = a(x[1])[2] - b(x[2])[2]
    end
    x0 = guess
    x1 = nlsolve(f!, x0, autodiff=:forward).zero
    a(x1[1])
end

function domain_2d(left::Function, bottom::Function, right::Function, top::Function)
    P1 = SVector{2}(compute_intersection_points(left, bottom))
    P2 = SVector{2}(compute_intersection_points(bottom, right))
    P3 = SVector{2}(compute_intersection_points(right, top))
    P4 = SVector{2}(compute_intersection_points(top, left))
    domain_2d(left, bottom, right, top, (P1, P2, P3, P4))
end

"""
Transfinite interpolation formula
Define new function
       x->transfinite_interpolation(x, domain) with domain parameter defined.
"""
function transfinite_interpolation(x, domain::domain_2d)
    c‚ÇÄ = domain.left
    c‚ÇÅ = domain.bottom
    c‚ÇÇ = domain.right
    c‚ÇÉ = domain.top
    P‚ÇÄ‚ÇÅ, P‚ÇÅ‚ÇÇ, P‚ÇÇ‚ÇÉ, P‚ÇÉ‚ÇÄ = domain.intersection_points
    (1-x[1])*c‚ÇÄ(x[2]) + x[1]*c‚ÇÇ(x[2]) + (1-x[2])*c‚ÇÅ(x[1]) + x[2]*c‚ÇÉ(x[1]) -
        ((1-x[2])*(1-x[1])*P‚ÇÄ‚ÇÅ + x[2]*x[1]*P‚ÇÇ‚ÇÉ + x[2]*(1-x[1])*P‚ÇÉ‚ÇÄ + (1-x[2])*x[1]*P‚ÇÅ‚ÇÇ)
end

"""
Discretization of the Domain
"""
struct DiscreteDomain
  domain::domain_2d
  mn::NTuple{2,Int64}
end

"""
Function to return the Jacobian of the transformation
The entries of the matrices are 
  J(f)[j,k] = ‚àÇf(x)[j]/‚àÇx[k]
i.e.,
  J = [‚àÇf‚ÇÅ/‚àÇx‚ÇÅ ‚àÇf‚ÇÅ/‚àÇx‚ÇÇ
       ‚àÇf‚ÇÇ/‚àÇx‚ÇÅ ‚àÇf‚ÇÇ/‚àÇx‚ÇÇ]
We require the transpose in our computations.
Here the parameters
- SS is the transfinite interpolation operator. SS(x) = S(x,domain)
- x is the (x[1],x[2]) pair in the reference grid
"""
function transfinite_interpolation_jacobian(x, S)
  d = size(x,1)
  SMatrix{d,d,Float64}(ForwardDiff.jacobian(S, x))'
end

"""
Function to return the inverse of the Jacobian matrix
Here the parameters
- SS is the transfinite interpolation operator. SS(x) = S(x,domain)
- x is the (x[1],x[2]) pair in the reference grid
"""
function inverse_transfinite_interpolation_jacobian(x, S)
    inv(transfinite_interpolation_jacobian(x, S))
end

"""
Function to reshape the material properties on the grid.

ùêàùêßùê©ùêÆùê≠ a matrix of tensors (an n√ón matrix) evaluated on the grid points.
   Pqr::Matrix{SMatrix{m,n,Float64}} = [ùêè(x‚ÇÅ‚ÇÅ) ùêè(x‚ÇÅ‚ÇÇ) ... ùêè(x‚ÇÅ‚Çô)
                                        ùêè(x‚ÇÇ‚ÇÅ) ùêè(x‚ÇÇ‚ÇÇ) ... ùêè(x‚ÇÇ‚Çô)
                                                      ...
                                        ùêè(x‚Çô‚ÇÅ) ùêè(x‚Çô‚ÇÇ)  ... ùêè(x‚Çô‚Çô)]
  where ùêè(x) = [P‚ÇÅ‚ÇÅ(x) P‚ÇÅ‚ÇÇ(x)
                P‚ÇÇ‚ÇÅ(x) P‚ÇÇ‚ÇÇ(x)]
ùêéùêÆùê≠ùê©ùêÆùê≠ a matrix of matrix with the following form
result = [ [P‚ÇÅ‚ÇÅ(x‚ÇÅ‚ÇÅ) ... P‚ÇÅ‚ÇÅ(x‚ÇÅ‚Çô)        [P‚ÇÅ‚ÇÇ(x‚ÇÅ‚ÇÅ) ... P‚ÇÅ‚ÇÇ(x‚ÇÅ‚Çô)
                     ...                          ...
            P‚ÇÅ‚ÇÅ(x‚Çô‚ÇÅ) ... P‚ÇÅ‚ÇÅ(x‚Çô‚Çô)],         P‚ÇÅ‚ÇÇ(x‚Çô‚ÇÅ) ... P‚ÇÅ‚ÇÇ(x‚ÇÅ‚Çô)];              
           [P‚ÇÇ‚ÇÅ(x‚ÇÅ‚ÇÅ) ... P‚ÇÇ‚ÇÅ(x‚ÇÅ‚Çô)        [P‚ÇÇ‚ÇÇ(x‚ÇÅ‚ÇÅ) ... P‚ÇÇ‚ÇÇ(x‚ÇÅ‚Çô)
                     ...                          ...
            P‚ÇÇ‚ÇÅ(x‚Çô‚ÇÅ) ... P‚ÇÇ‚ÇÅ(x‚Çô‚Çô)],         P‚ÇÇ‚ÇÇ(x‚Çô‚ÇÅ) ... P‚ÇÇ‚ÇÇ(x‚ÇÅ‚Çô)] 
         ]
"""
function get_property_matrix_on_grid(Pqr, l::Int64)
  m,n = size(Pqr[1])
  Ptuple = Tuple.(Pqr)
  P_page = reinterpret(reshape, Float64, Ptuple)
  dim = length(size(P_page))  
  reshape(splitdimsview(P_page, dim-l), (m,n))
end

"""
Get the surface Jacobian matrix defined as 
  surface_jacobian[i,i] = 1.0,    i ‚àâ Boundary(ùêß)  
          = |J|*|J‚Åª¬π*ùêß|,   i ‚àà Boundary(ùêß)
"""
function surface_jacobian(Œ©::Function, qr::AbstractMatrix{SVector{2,Float64}}, ùêß::AbstractVecOrMat{Int64}; X=[1])
  ùêß = vec(ùêß)
  # Function to compute the surface jacobian
  m1, m2 = size(qr)
  n(x) = reshape(Float64.(ùêß), (length(ùêß),1))
  nqr = n.(qr)
  Jqr = ((det‚àòtransfinite_interpolation_jacobian).(qr, Œ©)).*(inverse_transfinite_interpolation_jacobian.(qr, Œ©))
  J_on_grid = spdiagm.(vec.(get_property_matrix_on_grid(Jqr, length(ùêß))))
  n_on_grid = spdiagm.(vec.(get_property_matrix_on_grid(nqr, length(ùêß))))  
    # Get the axis of the normal 
  # (0 => x, 1 => y)
  axis = findall(ùêß .!= [0,0])[1]-1
  # Place the number of points on the corresponding edge at the leading position
  m2, m1 = normal_to_side((m1,m2), 0, (m2,m1))[axis]
  # Fill in the entries of the matrix corresponding to the edge = 1
  n2s = kron(normal_to_side(Œ¥·µ¢‚±º(m2,m2,(m2,m2)), Œ¥·µ¢‚±º(1,1,(m2,m2)), sparse(I(m1))).(ùêß)...)
  Jn_on_grid = (J_on_grid)*(n_on_grid);
  JJ1 = X‚äósqrt.(sum([(Ji*n2s) for Ji in Jn_on_grid].^2))  
  # Replace "0" with "1"
  JJ0 = spdiagm(ones(size(JJ1,1)))  
  i,j,v = findnz(JJ1)
  for k=1:lastindex(v)
    JJ0[i[k], j[k]] = v[k]
  end
  JJ0
end

"""
Get the bulk Jacobian of the transformation
  bulk_jacobian[i,i] = J(Œ©, qr[i,i])
"""
function bulk_jacobian(Œ©::Function, qr::AbstractMatrix{SVector{2,Float64}})  
  detJ(x) = (det‚àòtransfinite_interpolation_jacobian)(x,Œ©)    
  spdiagm([1,1] ‚äó vec(detJ.(qr)))
end

"""
Function to transform the material properties in the physical grid to the reference grid.
  res = transform_material_properties(material_property_tensor, reference_to_physical_map, point_on_reference_domain)
  Input: 1) "material_property_tensor" is the material property tensor as a function of point in the physical domain
         2) "reference_to_physical_map" is the function that returns the physical coordinates as a function of reference coordinates
         3) "point_on_reference_domain" is a point in the reference domain 
"""
function transform_material_properties(P::Function, Œ©::Function, qr::SVector{2,Float64})
  x = Œ©(qr)
  invJ = inverse_transfinite_interpolation_jacobian(qr, Œ©)
  detJ = (det‚àòtransfinite_interpolation_jacobian)(qr, Œ©)
  S = invJ ‚äó I(2)
  m,n = size(S)
  SMatrix{m,n,Float64}(S'*P(x)*S)*detJ
end