include("./3_layer_geometry_properties.jl")
include("./3_layer_PML_SBP_functions.jl")

"""
The PML damping
"""
const L·µ• = abs(z‚ÇÇ[1]-z‚ÇÅ[end])
const L‚Çï = x‚ÇÅ[end] - x‚ÇÅ[1]
const Œ¥ = 0.1*(L‚Çï)
const œÉ‚ÇÄ·µõ = 4*(‚àö(max(maximum(vp‚ÇÅ), maximum(vp‚ÇÇ))))/(2*Œ¥)*log(10^4) #c‚Çö,max = 4, œÅ = 1, Ref = 10^-4
const œÉ‚ÇÄ ∞ = 0*(‚àö(max(maximum(vp‚ÇÅ), maximum(vp‚ÇÇ))))/(2*Œ¥)*log(10^4) #c‚Çö,max = 4, œÅ = 1, Ref = 10^-4
const Œ± = œÉ‚ÇÄ·µõ*0.05; # The frequency shift parameter

"""
Vertical PML strip
"""
function œÉ·µ•(x)
  if((x[1] ‚âà (x‚ÇÅ[1]+0.9*L‚Çï)) || x[1] > (x‚ÇÅ[1]+0.9*L‚Çï))
    # return œÉ‚ÇÄ·µõ*((x[1] - x‚ÇÅ[1] - 0.9*L‚Çï)/Œ¥)^3  
    return 0.5*œÉ‚ÇÄ·µõ*(1 + tanh((x[1] - x‚ÇÅ[1] - 0.9*L‚Çï)))
  elseif((x[1] ‚âà (x‚ÇÅ[1]+0.1*L‚Çï)) || x[1] < (x‚ÇÅ[1]+0.1*L‚Çï))
    # return œÉ‚ÇÄ·µõ*((x‚ÇÅ[1] + 0.1*L‚Çï - x[1])/Œ¥)^3  
    return 0.5*œÉ‚ÇÄ·µõ*(1 + tanh((x‚ÇÅ[1] + 0.1*L‚Çï - x[1])))
  else
    return 0.0
  end
end

"""
Horizontal PML strip
"""
function œÉ‚Çï(x)
  0.0
end

P·¥æ·¥π·¥∏‚ÇÅ = [@SMatrix [C‚ÇÅ‚ÇÅ¬π[i,j]*(œÉ‚Çï(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j])) - œÉ·µ•(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j]))) 0 0 0; 
                   0 C‚ÇÉ‚ÇÉ¬π[i,j]*(œÉ‚Çï(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j])) - œÉ·µ•(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j]))) 0 0; 
                   0 0 C‚ÇÉ‚ÇÉ¬π[i,j]*(œÉ·µ•(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j])) - œÉ‚Çï(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j]))) 0; 
                   0 0 0 C‚ÇÇ‚ÇÇ¬π[i,j]*(œÉ·µ•(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j])) - œÉ‚Çï(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j])))] 
                   for i=1:M‚ÇÅ, j=1:N‚ÇÅ]
P·¥æ·¥π·¥∏‚ÇÇ = [@SMatrix [C‚ÇÅ‚ÇÅ¬≤[i,j]*(œÉ‚Çï(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j])) - œÉ·µ•(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j]))) 0 0 0; 
                   0 C‚ÇÉ‚ÇÉ¬≤[i,j]*(œÉ‚Çï(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j])) - œÉ·µ•(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j]))) 0 0; 
                   0 0 C‚ÇÉ‚ÇÉ¬≤[i,j]*(œÉ·µ•(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j])) - œÉ‚Çï(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j]))) 0; 
                   0 0 0 C‚ÇÇ‚ÇÇ¬≤[i,j]*(œÉ·µ•(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j])) - œÉ‚Çï(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j])))] 
                   for i=1:M‚ÇÇ, j=1:N‚ÇÇ]
P·¥æ·¥π·¥∏‚ÇÉ = [@SMatrix [C‚ÇÅ‚ÇÅ¬≥[i,j]*(œÉ‚Çï(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j])) - œÉ·µ•(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j]))) 0 0 0; 
                   0 C‚ÇÉ‚ÇÉ¬≥[i,j]*(œÉ‚Çï(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j])) - œÉ·µ•(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j]))) 0 0; 
                   0 0 C‚ÇÉ‚ÇÉ¬≥[i,j]*(œÉ·µ•(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j])) - œÉ‚Çï(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j]))) 0; 
                   0 0 0 C‚ÇÇ‚ÇÇ¬≥[i,j]*(œÉ·µ•(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j])) - œÉ‚Çï(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j])))] 
                   for i=1:M‚ÇÉ, j=1:N‚ÇÉ]

                  
‚Ñô‚ÇÅ = [Pt(P‚ÇÅ[i,j], Œ©‚ÇÅ, ùê™ùê´‚ÇÅ[i,j]) for i=1:M‚ÇÅ, j=1:N‚ÇÅ];
‚Ñô‚ÇÇ = [Pt(P‚ÇÇ[i,j], Œ©‚ÇÇ, ùê™ùê´‚ÇÇ[i,j]) for i=1:M‚ÇÇ, j=1:N‚ÇÇ];
‚Ñô‚ÇÉ = [Pt(P‚ÇÉ[i,j], Œ©‚ÇÉ, ùê™ùê´‚ÇÉ[i,j]) for i=1:M‚ÇÉ, j=1:N‚ÇÉ];
‚Ñô·¥æ·¥π·¥∏‚ÇÅ = [Pt·¥æ·¥π·¥∏(P·¥æ·¥π·¥∏‚ÇÅ[i,j], Œ©‚ÇÅ, ùê™ùê´‚ÇÅ[i,j]) for i=1:M‚ÇÅ, j=1:N‚ÇÅ];
‚Ñô·¥æ·¥π·¥∏‚ÇÇ = [Pt·¥æ·¥π·¥∏(P·¥æ·¥π·¥∏‚ÇÇ[i,j], Œ©‚ÇÇ, ùê™ùê´‚ÇÇ[i,j]) for i=1:M‚ÇÇ, j=1:N‚ÇÇ];
‚Ñô·¥æ·¥π·¥∏‚ÇÉ = [Pt·¥æ·¥π·¥∏(P·¥æ·¥π·¥∏‚ÇÉ[i,j], Œ©‚ÇÉ, ùê™ùê´‚ÇÉ[i,j]) for i=1:M‚ÇÉ, j=1:N‚ÇÉ];

stima = ùêä3‚Çö‚Çò‚Çó((‚Ñô‚ÇÅ,‚Ñô‚ÇÇ,‚Ñô‚ÇÉ), (‚Ñô·¥æ·¥π·¥∏‚ÇÅ, ‚Ñô·¥æ·¥π·¥∏‚ÇÇ, ‚Ñô·¥æ·¥π·¥∏‚ÇÉ), ((Z‚ÇÅ¬π, Z‚ÇÇ¬π), (Z‚ÇÅ¬≤, Z‚ÇÇ¬≤), (Z‚ÇÅ¬≥, Z‚ÇÇ¬≥)), (RHO‚ÇÅ, RHO‚ÇÇ, RHO‚ÇÉ), (ùõÄ‚ÇÅ,ùõÄ‚ÇÇ,ùõÄ‚ÇÉ), (ùê™ùê´‚ÇÅ,ùê™ùê´‚ÇÇ,ùê™ùê´‚ÇÉ));
massma =  ùêå3‚Åª¬π‚Çö‚Çò‚Çó((ùõÄ‚ÇÅ, ùõÄ‚ÇÇ, ùõÄ‚ÇÉ), (ùê™ùê´‚ÇÅ, ùê™ùê´‚ÇÇ, ùê™ùê´‚ÇÉ), (RHO‚ÇÅ, RHO‚ÇÇ, RHO‚ÇÉ));

ùêî(x) = @SVector [20*exp(-20*((x[1]-(x‚ÇÅ[end]*0.85+x‚ÇÅ[1]*0.15))^2 + (x[2]-(-1.5))^2)), 
                 20*exp(-20*((x[1]-(x‚ÇÅ[end]*0.85+x‚ÇÅ[1]*0.15))^2 + (x[2]-(-1.5))^2))]
ùêè(x) = @SVector [0.0, 0.0] # = ùêî‚Çú(x)
ùêï(x) = @SVector [0.0, 0.0]
ùêñ(x) = @SVector [0.0, 0.0]
ùêê(x) = @SVector [0.0, 0.0]
ùêë(x) = @SVector [0.0, 0.0]

const Œît = 1e-4
tf = 10.0
ntime = ceil(Int, tf/Œît)

let
  t = 0.0
  W‚ÇÄ = vcat(eltocols(vec(ùêî.(XZ‚ÇÅ))), eltocols(vec(ùêè.(XZ‚ÇÅ))), eltocols(vec(ùêï.(XZ‚ÇÅ))), eltocols(vec(ùêñ.(XZ‚ÇÅ))), eltocols(vec(ùêê.(XZ‚ÇÅ))), eltocols(vec(ùêë.(XZ‚ÇÅ))))
  X‚ÇÄ = vcat(eltocols(vec(ùêî.(XZ‚ÇÇ))), eltocols(vec(ùêè.(XZ‚ÇÇ))), eltocols(vec(ùêï.(XZ‚ÇÇ))), eltocols(vec(ùêñ.(XZ‚ÇÇ))), eltocols(vec(ùêê.(XZ‚ÇÇ))), eltocols(vec(ùêë.(XZ‚ÇÇ))))
  Y‚ÇÄ = vcat(eltocols(vec(ùêî.(XZ‚ÇÉ))), eltocols(vec(ùêè.(XZ‚ÇÉ))), eltocols(vec(ùêï.(XZ‚ÇÉ))), eltocols(vec(ùêñ.(XZ‚ÇÉ))), eltocols(vec(ùêê.(XZ‚ÇÉ))), eltocols(vec(ùêë.(XZ‚ÇÉ))))
  global Z‚ÇÄ = vcat(W‚ÇÄ, X‚ÇÄ, Y‚ÇÄ)
  global maxvals‚ÇÅ = zeros(Float64, ntime)
  global maxvals‚ÇÇ = zeros(Float64, ntime)
  global maxvals‚ÇÉ = zeros(Float64, ntime)
  k‚ÇÅ = zeros(Float64, length(Z‚ÇÄ))
  k‚ÇÇ = zeros(Float64, length(Z‚ÇÄ))
  k‚ÇÉ = zeros(Float64, length(Z‚ÇÄ))
  k‚ÇÑ = zeros(Float64, length(Z‚ÇÄ)) 
  M = massma*stima
  # @gif for i=1:ntime
  for i=1:ntime
    sol = Z‚ÇÄ, k‚ÇÅ, k‚ÇÇ, k‚ÇÉ, k‚ÇÑ
    Z‚ÇÄ = RK4_1!(M, sol)    
    t += Œît        
    (i%100 == 0) && println("Done t = "*string(t)*"\t max(sol) = "*string(maximum(Z‚ÇÄ)))

    # Plotting part for 
    u1ref‚ÇÅ,u2ref‚ÇÅ = split_solution(Z‚ÇÄ[1:12*(prod(ùõÄ‚ÇÅ.mn))], ùõÄ‚ÇÅ.mn, 12);
    u1ref‚ÇÇ,u2ref‚ÇÇ =  split_solution(Z‚ÇÄ[12*(prod(ùõÄ‚ÇÅ.mn))+1:12*(prod(ùõÄ‚ÇÅ.mn))+12*(prod(ùõÄ‚ÇÇ.mn))], ùõÄ‚ÇÇ.mn, 12);
    u1ref‚ÇÉ,u2ref‚ÇÉ =  split_solution(Z‚ÇÄ[12*(prod(ùõÄ‚ÇÅ.mn))+12*(prod(ùõÄ‚ÇÇ.mn))+1:12*(prod(ùõÄ‚ÇÅ.mn))+12*(prod(ùõÄ‚ÇÇ.mn))+12*(prod(ùõÄ‚ÇÉ.mn))], ùõÄ‚ÇÉ.mn, 12);
    absu1 = sqrt.((u1ref‚ÇÅ.^2) + (u2ref‚ÇÅ.^2)) ;
    absu2 = sqrt.((u1ref‚ÇÇ.^2) + (u2ref‚ÇÇ.^2)) ;
    absu3 = sqrt.((u1ref‚ÇÉ.^2) + (u2ref‚ÇÉ.^2)) ;

    maxvals‚ÇÅ[i] = sqrt(norm(u1ref‚ÇÅ,2)^2 + norm(u2ref‚ÇÅ)^2)
    maxvals‚ÇÇ[i] = sqrt(norm(u1ref‚ÇÇ,2)^2 + norm(u2ref‚ÇÇ)^2)
    maxvals‚ÇÉ[i] = sqrt(norm(u1ref‚ÇÉ,2)^2 + norm(u2ref‚ÇÉ)^2)
  end
  # end every 1000
end  

u1ref‚ÇÅ,u2ref‚ÇÅ = split_solution(Z‚ÇÄ[1:12*(prod(ùõÄ‚ÇÅ.mn))], ùõÄ‚ÇÅ.mn, 12);
u1ref‚ÇÇ,u2ref‚ÇÇ =  split_solution(Z‚ÇÄ[12*(prod(ùõÄ‚ÇÅ.mn))+1:12*(prod(ùõÄ‚ÇÅ.mn))+12*(prod(ùõÄ‚ÇÇ.mn))], ùõÄ‚ÇÇ.mn, 12);
u1ref‚ÇÉ,u2ref‚ÇÉ =  split_solution(Z‚ÇÄ[12*(prod(ùõÄ‚ÇÅ.mn))+12*(prod(ùõÄ‚ÇÇ.mn))+1:12*(prod(ùõÄ‚ÇÅ.mn))+12*(prod(ùõÄ‚ÇÇ.mn))+12*(prod(ùõÄ‚ÇÉ.mn))], ùõÄ‚ÇÉ.mn, 12);
absu1 = sqrt.((u1ref‚ÇÅ.^2) + (u2ref‚ÇÅ.^2)) ;
absu2 = sqrt.((u1ref‚ÇÇ.^2) + (u2ref‚ÇÇ.^2)) ;
absu3 = sqrt.((u1ref‚ÇÉ.^2) + (u2ref‚ÇÉ.^2)) ;

getX(ARR) = ARR[1]
getY(ARR) = ARR[2]

XC‚ÇÅ = getX.(XZ‚ÇÅ); ZC‚ÇÅ = getY.(XZ‚ÇÅ) 
XC‚ÇÇ = getX.(XZ‚ÇÇ); ZC‚ÇÇ = getY.(XZ‚ÇÇ) 
XC‚ÇÉ = getX.(XZ‚ÇÉ); ZC‚ÇÉ = getY.(XZ‚ÇÉ)

pyplot()

PyPlot.matplotlib[:rc]("text", usetex=true) 
PyPlot.matplotlib[:rc]("mathtext",fontset="cm")
PyPlot.matplotlib[:rc]("font",family="serif",size=20)

# scalefontsizes(2)


plt3 = Plots.contourf(XC‚ÇÅ, ZC‚ÇÅ, reshape(absu1, size(XC‚ÇÅ)...), colormap=:matter, clims=(1,5))
Plots.contourf!(plt3, XC‚ÇÇ, ZC‚ÇÇ, reshape(absu2, size(XC‚ÇÇ)...), label="", colormap=:matter, clims=(1,5))
Plots.contourf!(plt3, XC‚ÇÉ, ZC‚ÇÉ, reshape(absu3, size(XC‚ÇÉ)...), label="", colormap=:matter, clims=(1,5))
Plots.annotate!(plt3, 10, -0.2, ("Layer 1", 20, :black))
Plots.annotate!(plt3, 10, -1.8, ("Layer 2", 20, :black))
Plots.annotate!(plt3, 14, -3.2, ("Layer 3", 20, :black))
Plots.annotate!(plt3, 16.2, -2, ("\$ \\sigma_0^v = 0\$", 20, :black))
Plots.plot!(plt3, [0,x‚ÇÅ[end]],[-3.34,-2.47], lw=2, lc=:black, label="")
Plots.plot!(plt3, [0,x‚ÇÅ[end]],[z‚ÇÅ[1],z‚ÇÅ[1]], lw=2, lc=:black, label="")
Plots.vline!(plt3, [(x‚ÇÅ[1]+0.9*L‚Çï)], lw=1, lc=:black, ls=:dash, label="")
Plots.vline!(plt3, [(x‚ÇÅ[1]+0.1*L‚Çï)], lw=1, lc=:black, ls=:dash, label="", legend=:topleft, size=(800,600))
# Plots.vspan!(plt3, [(x‚ÇÅ[1]+0.9*L‚Çï),x‚ÇÅ[end]], fillalpha=0.5, fillcolor=:orange, label="")
Plots.xlims!(plt3, (0.5*x‚ÇÅ[end],x‚ÇÅ[end]))
Plots.ylims!(plt3, (z‚ÇÇ[1],z‚ÇÅ[end]))
Plots.xlabel!(plt3, "\$x\$ (in km)")
Plots.ylabel!(plt3, "\$z\$ (in km)")

plt4 = Plots.contourf(XC‚ÇÇ, ZC‚ÇÇ, reshape(C‚ÇÉ‚ÇÉ¬≤, size(XC‚ÇÇ)...), label="", colormap=:matter)
Plots.contourf!(plt4, XC‚ÇÉ, ZC‚ÇÉ, reshape(C‚ÇÉ‚ÇÉ¬≥, size(XC‚ÇÉ)...), label="", colormap=:matter)
Plots.contourf!(plt4, XC‚ÇÅ, ZC‚ÇÅ, reshape(C‚ÇÉ‚ÇÉ¬π, size(XC‚ÇÅ)...), colormap=:matter, label="", clims=(0.01,15))
Plots.annotate!(plt4, 3, -0.2, ("Layer 1", 10, :black))
Plots.annotate!(plt4, 3, -1.8, ("Layer 2", 10, :black))
Plots.annotate!(plt4, 14, -3.2, ("Layer 3", 10, :black))
Plots.plot!(plt4, [0,x‚ÇÅ[end]],[-3.34,-2.47], lw=3, lc=:white, label="", xtickfont=:black)
Plots.plot!(plt4, [0,x‚ÇÅ[end]],[z‚ÇÅ[1],z‚ÇÅ[1]], lw=3, lc=:black, label="", xtickfont=:black)
Plots.vline!(plt4, [(x‚ÇÅ[1]+0.9*L‚Çï)], lw=2, lc=:black, ls=:dash, label="")
Plots.vline!(plt4, [(x‚ÇÅ[1]+0.1*L‚Çï)], lw=2, lc=:black, ls=:dash, label="", legend=:topleft, size=(800,300))
Plots.vspan!(plt4, [(x‚ÇÅ[1]+0.9*L‚Çï),x‚ÇÅ[end]], fillalpha=0.5, fillcolor=:orange, label="")
Plots.vspan!(plt4, [x‚ÇÅ[1],(x‚ÇÅ[1]+0.1*L‚Çï)], fillalpha=0.5, fillcolor=:orange, label="")
Plots.xlims!(plt4, (x‚ÇÅ[1],x‚ÇÅ[end]))
Plots.ylims!(plt4, (z‚ÇÇ[1],z‚ÇÅ[end]))
Plots.xlabel!(plt4, "\$x\$ (in km)")
Plots.ylabel!(plt4, "\$z\$ (in km)")

plt5 = Plots.contourf(XC‚ÇÇ, ZC‚ÇÇ, reshape(œÉ·µ•.(Œ©‚ÇÇ.(ùê™ùê´‚ÇÇ)), size(XC‚ÇÇ)...), label="", colormap=:matter)
Plots.contourf!(plt5, XC‚ÇÉ, ZC‚ÇÉ, reshape(œÉ·µ•.(Œ©‚ÇÉ.(ùê™ùê´‚ÇÉ)), size(XC‚ÇÉ)...), label="", colormap=:matter)
Plots.contourf!(plt5, XC‚ÇÅ, ZC‚ÇÅ, reshape(œÉ·µ•.(Œ©‚ÇÅ.(ùê™ùê´‚ÇÅ)), size(XC‚ÇÅ)...), colormap=:matter, label="")
Plots.annotate!(plt5, 3, -0.2, "Layer 1", :black)
Plots.annotate!(plt5, 3, -1.8, "Layer 2", :black)
Plots.annotate!(plt5, 12, -3.2, "Layer 3", :black)
Plots.plot!(plt5, [0,x‚ÇÅ[end]],[-3.34,-2.47], lw=3, lc=:black, label="")
Plots.plot!(plt5, [0,x‚ÇÅ[end]],[z‚ÇÅ[1],z‚ÇÅ[1]], lw=3, lc=:black, label="")
Plots.vline!(plt5, [(x‚ÇÅ[1]+0.9*L‚Çï)], lw=2, lc=:black, ls=:dash, label="")
Plots.vline!(plt5, [(x‚ÇÅ[1]+0.1*L‚Çï)], lw=2, lc=:black, ls=:dash, label="", legend=:topleft, size=(800,300))
Plots.xlims!(plt5, (x‚ÇÅ[1],x‚ÇÅ[end]))
Plots.ylims!(plt5, (z‚ÇÇ[1],z‚ÇÅ[end]))
Plots.xlabel!(plt5, "\$x\$ (in km)")
Plots.ylabel!(plt5, "\$z\$ (in km)")