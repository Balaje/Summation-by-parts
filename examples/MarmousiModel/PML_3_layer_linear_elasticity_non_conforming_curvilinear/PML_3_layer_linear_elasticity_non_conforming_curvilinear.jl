include("./3_layer_geometry_properties.jl");
include("./3_layer_PML_SBP_functions.jl");

cp‚ÇÅ = maximum(vp‚ÇÅ); cs‚ÇÅ = maximum(vs‚ÇÅ);
cp‚ÇÇ = maximum(vp‚ÇÇ); cs‚ÇÇ = maximum(vs‚ÇÇ);

"""
The PML damping
"""
const L·µ• = abs(z‚ÇÇ[1]-z‚ÇÅ[end])
const L‚Çï = x‚ÇÅ[end] - x‚ÇÅ[1]
const Œ¥ = 0.1*(L‚Çï)
const œÉ‚ÇÄ·µõ = 0*(max(cp‚ÇÅ, cp‚ÇÇ))/(2*Œ¥)*log(10^4) #c‚Çö,max = 4, œÅ = 1, Ref = 10^-4
const œÉ‚ÇÄ ∞ = 0*(max(cp‚ÇÅ, cp‚ÇÇ))/(2*Œ¥)*log(10^4) #c‚Çö,max = 4, œÅ = 1, Ref = 10^-4
const Œ± = œÉ‚ÇÄ·µõ*0.05; # The frequency shift parameter

"""
Vertical PML strip
"""
function œÉ·µ•(x)
  if((x[1] ‚âà (x‚ÇÅ[1]+0.9*L‚Çï)) || x[1] > (x‚ÇÅ[1]+0.9*L‚Çï))
    return œÉ‚ÇÄ·µõ*((x[1] - x‚ÇÅ[1] - 0.9*L‚Çï)/Œ¥)^3  
    # return 0.5*œÉ‚ÇÄ·µõ*(1 + tanh((x[1] - x‚ÇÅ[1] - 0.9*L‚Çï)))
  elseif((x[1] ‚âà (x‚ÇÅ[1]+0.1*L‚Çï)) || x[1] < (x‚ÇÅ[1]+0.1*L‚Çï))
    return œÉ‚ÇÄ·µõ*((x‚ÇÅ[1] + 0.1*L‚Çï - x[1])/Œ¥)^3  
    # return 0.5*œÉ‚ÇÄ·µõ*(1 + tanh((x‚ÇÅ[1] + 0.1*L‚Çï - x[1])))
  else
    return 0.0
  end
end

"""
Horizontal PML strip
"""
function œÉ‚Çï(x)
  0.0
end

P·¥æ·¥π·¥∏‚ÇÅ = [@SMatrix [C‚ÇÅ‚ÇÅ¬π[i,j]*(œÉ‚Çï(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j])) - œÉ·µ•(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j]))) 0 0 0; 
                   0 C‚ÇÉ‚ÇÉ¬π[i,j]*(œÉ‚Çï(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j])) - œÉ·µ•(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j]))) 0 0; 
                   0 0 C‚ÇÉ‚ÇÉ¬π[i,j]*(œÉ·µ•(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j])) - œÉ‚Çï(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j]))) 0; 
                   0 0 0 C‚ÇÇ‚ÇÇ¬π[i,j]*(œÉ·µ•(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j])) - œÉ‚Çï(Œ©‚ÇÅ(ùê™ùê´‚ÇÅ[i,j])))] 
                   for i=1:M‚ÇÅ, j=1:N‚ÇÅ]
P·¥æ·¥π·¥∏‚ÇÇ = [@SMatrix [C‚ÇÅ‚ÇÅ¬≤[i,j]*(œÉ‚Çï(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j])) - œÉ·µ•(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j]))) 0 0 0; 
                   0 C‚ÇÉ‚ÇÉ¬≤[i,j]*(œÉ‚Çï(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j])) - œÉ·µ•(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j]))) 0 0; 
                   0 0 C‚ÇÉ‚ÇÉ¬≤[i,j]*(œÉ·µ•(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j])) - œÉ‚Çï(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j]))) 0; 
                   0 0 0 C‚ÇÇ‚ÇÇ¬≤[i,j]*(œÉ·µ•(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j])) - œÉ‚Çï(Œ©‚ÇÇ(ùê™ùê´‚ÇÇ[i,j])))] 
                   for i=1:M‚ÇÇ, j=1:N‚ÇÇ]
P·¥æ·¥π·¥∏‚ÇÉ = [@SMatrix [C‚ÇÅ‚ÇÅ¬≥[i,j]*(œÉ‚Çï(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j])) - œÉ·µ•(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j]))) 0 0 0; 
                   0 C‚ÇÉ‚ÇÉ¬≥[i,j]*(œÉ‚Çï(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j])) - œÉ·µ•(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j]))) 0 0; 
                   0 0 C‚ÇÉ‚ÇÉ¬≥[i,j]*(œÉ·µ•(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j])) - œÉ‚Çï(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j]))) 0; 
                   0 0 0 C‚ÇÇ‚ÇÇ¬≥[i,j]*(œÉ·µ•(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j])) - œÉ‚Çï(Œ©‚ÇÉ(ùê™ùê´‚ÇÉ[i,j])))] 
                   for i=1:M‚ÇÉ, j=1:N‚ÇÉ]

                  
‚Ñô‚ÇÅ = [Pt(P‚ÇÅ[i,j], Œ©‚ÇÅ, ùê™ùê´‚ÇÅ[i,j]) for i=1:M‚ÇÅ, j=1:N‚ÇÅ];
‚Ñô‚ÇÇ = [Pt(P‚ÇÇ[i,j], Œ©‚ÇÇ, ùê™ùê´‚ÇÇ[i,j]) for i=1:M‚ÇÇ, j=1:N‚ÇÇ];
‚Ñô‚ÇÉ = [Pt(P‚ÇÉ[i,j], Œ©‚ÇÉ, ùê™ùê´‚ÇÉ[i,j]) for i=1:M‚ÇÉ, j=1:N‚ÇÉ];
‚Ñô·¥æ·¥π·¥∏‚ÇÅ = [Pt·¥æ·¥π·¥∏(P·¥æ·¥π·¥∏‚ÇÅ[i,j], Œ©‚ÇÅ, ùê™ùê´‚ÇÅ[i,j]) for i=1:M‚ÇÅ, j=1:N‚ÇÅ];
‚Ñô·¥æ·¥π·¥∏‚ÇÇ = [Pt·¥æ·¥π·¥∏(P·¥æ·¥π·¥∏‚ÇÇ[i,j], Œ©‚ÇÇ, ùê™ùê´‚ÇÇ[i,j]) for i=1:M‚ÇÇ, j=1:N‚ÇÇ];
‚Ñô·¥æ·¥π·¥∏‚ÇÉ = [Pt·¥æ·¥π·¥∏(P·¥æ·¥π·¥∏‚ÇÉ[i,j], Œ©‚ÇÉ, ùê™ùê´‚ÇÉ[i,j]) for i=1:M‚ÇÉ, j=1:N‚ÇÉ];

stima = ùêä3‚Çö‚Çò‚Çó((‚Ñô‚ÇÅ,‚Ñô‚ÇÇ,‚Ñô‚ÇÉ), (‚Ñô·¥æ·¥π·¥∏‚ÇÅ, ‚Ñô·¥æ·¥π·¥∏‚ÇÇ, ‚Ñô·¥æ·¥π·¥∏‚ÇÉ), ((Z‚ÇÅ¬π, Z‚ÇÇ¬π), (Z‚ÇÅ¬≤, Z‚ÇÇ¬≤), (Z‚ÇÅ¬≥, Z‚ÇÇ¬≥)), (RHO‚ÇÅ, RHO‚ÇÇ, RHO‚ÇÉ), (ùõÄ‚ÇÅ,ùõÄ‚ÇÇ,ùõÄ‚ÇÉ), (ùê™ùê´‚ÇÅ,ùê™ùê´‚ÇÇ,ùê™ùê´‚ÇÉ));
massma =  ùêå3‚Åª¬π‚Çö‚Çò‚Çó((ùõÄ‚ÇÅ, ùõÄ‚ÇÇ, ùõÄ‚ÇÉ), (ùê™ùê´‚ÇÅ, ùê™ùê´‚ÇÇ, ùê™ùê´‚ÇÉ), (RHO‚ÇÅ, RHO‚ÇÇ, RHO‚ÇÉ));

# ùêî(x) = @SVector [exp(-20*((x[1]-(x‚ÇÅ[end]*0.85+x‚ÇÅ[1]*0.15))^2 + (x[2]-(-1.5))^2)) + exp(-20*((x[1]-(x‚ÇÅ[end]*0.15+x‚ÇÅ[1]*0.85))^2 + (x[2]-(-1.5))^2)) + exp(-20*((x[1]-(x‚ÇÅ[end]*0.5+x‚ÇÅ[1]*0.5))^2 + (x[2]-(-1.5))^2)), 
#                  exp(-20*((x[1]-(x‚ÇÅ[end]*0.85+x‚ÇÅ[1]*0.15))^2 + (x[2]-(-1.5))^2)) + exp(-20*((x[1]-(x‚ÇÅ[end]*0.15+x‚ÇÅ[1]*0.85))^2 + (x[2]-(-1.5))^2)) + exp(-20*((x[1]-(x‚ÇÅ[end]*0.5+x‚ÇÅ[1]*0.5))^2 + (x[2]-(-1.5))^2))]
ùêî(x) = @SVector [0.0, 0.0]
ùêè(x) = @SVector [0.0, 0.0] # = ùêî‚Çú(x)a
ùêï(x) = @SVector [0.0, 0.0]
ùêñ(x) = @SVector [0.0, 0.0]
ùêê(x) = @SVector [0.0, 0.0]
ùêë(x) = @SVector [0.0, 0.0]

const h = norm(XZ‚ÇÉ[end,1] - XZ‚ÇÉ[end-1,1]);
const Œît = 0.2*h/sqrt(max((cp‚ÇÅ^2+cs‚ÇÅ^2), (cp‚ÇÇ^2+cs‚ÇÇ^2)));
tf = 5.0
ntime = ceil(Int, tf/Œît)
params = (0.05*norm(XZ‚ÇÇ[1,1] - XZ‚ÇÇ[1,2]), 0.05*norm(XZ‚ÇÇ[1,1] - XZ‚ÇÇ[2,1]), 10, (0.15, 0.5, 0.85), (0.3, 0.3, 0.3))
ntime_plot = ceil(Int64, ntime/10);

plt3 = Vector{Plots.Plot}(undef,9);

# scalefontsizes()
let
  t = 0.0
  W‚ÇÄ = vcat(eltocols(vec(ùêî.(XZ‚ÇÅ))), eltocols(vec(ùêè.(XZ‚ÇÅ))), eltocols(vec(ùêï.(XZ‚ÇÅ))), eltocols(vec(ùêñ.(XZ‚ÇÅ))), eltocols(vec(ùêê.(XZ‚ÇÅ))), eltocols(vec(ùêë.(XZ‚ÇÅ))))
  X‚ÇÄ = vcat(eltocols(vec(ùêî.(XZ‚ÇÇ))), eltocols(vec(ùêè.(XZ‚ÇÇ))), eltocols(vec(ùêï.(XZ‚ÇÇ))), eltocols(vec(ùêñ.(XZ‚ÇÇ))), eltocols(vec(ùêê.(XZ‚ÇÇ))), eltocols(vec(ùêë.(XZ‚ÇÇ))))
  Y‚ÇÄ = vcat(eltocols(vec(ùêî.(XZ‚ÇÉ))), eltocols(vec(ùêè.(XZ‚ÇÉ))), eltocols(vec(ùêï.(XZ‚ÇÉ))), eltocols(vec(ùêñ.(XZ‚ÇÉ))), eltocols(vec(ùêê.(XZ‚ÇÉ))), eltocols(vec(ùêë.(XZ‚ÇÉ))))
  global Z‚ÇÄ = vcat(W‚ÇÄ, X‚ÇÄ, Y‚ÇÄ)
  global maxvals = zeros(Float64, ntime)
  k‚ÇÅ = zeros(Float64, length(Z‚ÇÄ))
  k‚ÇÇ = zeros(Float64, length(Z‚ÇÄ))
  k‚ÇÉ = zeros(Float64, length(Z‚ÇÄ))
  k‚ÇÑ = zeros(Float64, length(Z‚ÇÄ)) 
  M = massma*stima
  count = 1  
  function ùêÖ(t, xy, Z)  
    xy‚ÇÅ, xy‚ÇÇ, xy‚ÇÉ = xy    
    Z‚ÇÅ, Z‚ÇÇ, Z‚ÇÉ = Z
    [Z‚ÇÅ; eltocols(f.(Ref(t), vec(xy‚ÇÅ), Ref(params))); Z‚ÇÅ; Z‚ÇÅ; Z‚ÇÅ; Z‚ÇÅ;
     Z‚ÇÇ; eltocols(f.(Ref(t), vec(xy‚ÇÇ), Ref(params))); Z‚ÇÇ; Z‚ÇÇ; Z‚ÇÇ; Z‚ÇÇ;
     Z‚ÇÉ; eltocols(f.(Ref(t), vec(xy‚ÇÉ), Ref(params))); Z‚ÇÉ; Z‚ÇÉ; Z‚ÇÉ; Z‚ÇÉ]
  end
  # @gif for i=1:ntime
  xys =  XZ‚ÇÅ, XZ‚ÇÇ, XZ‚ÇÉ
  Z = zeros(2*length(XZ‚ÇÅ)),zeros(2*length(XZ‚ÇÇ)),zeros(2*length(XZ‚ÇÉ))
  Hq‚ÇÅ = SBP_1_2_CONSTANT_0_1(N‚ÇÅ).norm;  Hr‚ÇÅ = SBP_1_2_CONSTANT_0_1(M‚ÇÅ).norm;
  Hq‚ÇÇ = SBP_1_2_CONSTANT_0_1(N‚ÇÇ).norm;  Hr‚ÇÇ = SBP_1_2_CONSTANT_0_1(M‚ÇÇ).norm;
  Hq‚ÇÉ = SBP_1_2_CONSTANT_0_1(N‚ÇÉ).norm;  Hr‚ÇÉ = SBP_1_2_CONSTANT_0_1(M‚ÇÉ).norm;
  Hqr‚ÇÅ = Hq‚ÇÅ ‚äó Hr‚ÇÅ
  Hqr‚ÇÇ = Hq‚ÇÇ ‚äó Hr‚ÇÇ
  Hqr‚ÇÉ = Hq‚ÇÉ ‚äó Hr‚ÇÉ
  for i=1:ntime
    sol = Z‚ÇÄ, k‚ÇÅ, k‚ÇÇ, k‚ÇÉ, k‚ÇÑ
    # Z‚ÇÄ = RK4_1!(Œît, M, sol)    
    Fs = (ùêÖ(t, xys, Z), ùêÖ(t+0.5Œît, xys, Z), ùêÖ(t+Œît, xys, Z))
    Z‚ÇÄ = RK4_1!(M, sol, Œît, Fs, massma)        
    #Z‚ÇÄ = massma*Z‚ÇÄ
    t += Œît        
    (i%10 == 0) && println("Done t = "*string(t)*"\t max(sol) = "*string(maximum(Z‚ÇÄ)))

    # Plotting part for 
    u1ref‚ÇÅ,u2ref‚ÇÅ = split_solution(Z‚ÇÄ[1:12*(prod(ùõÄ‚ÇÅ.mn))], ùõÄ‚ÇÅ.mn, 12);
    u1ref‚ÇÇ,u2ref‚ÇÇ = split_solution(Z‚ÇÄ[12*(prod(ùõÄ‚ÇÅ.mn))+1:12*(prod(ùõÄ‚ÇÅ.mn))+12*(prod(ùõÄ‚ÇÇ.mn))], ùõÄ‚ÇÇ.mn, 12);
    u1ref‚ÇÉ,u2ref‚ÇÉ = split_solution(Z‚ÇÄ[12*(prod(ùõÄ‚ÇÅ.mn))+12*(prod(ùõÄ‚ÇÇ.mn))+1:12*(prod(ùõÄ‚ÇÅ.mn))+12*(prod(ùõÄ‚ÇÇ.mn))+12*(prod(ùõÄ‚ÇÉ.mn))], ùõÄ‚ÇÉ.mn, 12);
    absu1 = sqrt.((u1ref‚ÇÅ.^2) + (u2ref‚ÇÅ.^2)) ;
    absu2 = sqrt.((u1ref‚ÇÇ.^2) + (u2ref‚ÇÇ.^2)) ;
    absu3 = sqrt.((u1ref‚ÇÉ.^2) + (u2ref‚ÇÉ.^2)) ;

    # Add code to plot to generate the GIFs
    # if((i == ceil(Int64, 0.1/Œît)) || (i == ceil(Int64, 0.2/Œît)) || (i == ceil(Int64, 0.3/Œît)) ||  (i == ceil(Int64, 0.4/Œît)) ||  (i == ceil(Int64, 0.5/Œît)) ||  (i == ceil(Int64, 0.6/Œît)) ||  (i == ceil(Int64, 0.7/Œît)) ||  (i == ceil(Int64, 0.8/Œît))) 
    if(ceil(i%ntime_plot) == 0.0)
      XC‚ÇÅ = getX.(XZ‚ÇÅ); ZC‚ÇÅ = getY.(XZ‚ÇÅ) 
      XC‚ÇÇ = getX.(XZ‚ÇÇ); ZC‚ÇÇ = getY.(XZ‚ÇÇ) 
      XC‚ÇÉ = getX.(XZ‚ÇÉ); ZC‚ÇÉ = getY.(XZ‚ÇÉ)
      plt3[count] = Plots.plot()
      Plots.contourf!(plt3[count], XC‚ÇÅ, ZC‚ÇÅ, reshape((absu1), size(XC‚ÇÅ)...), label="", colormap=:jet)
      Plots.contourf!(plt3[count], XC‚ÇÇ, ZC‚ÇÇ, reshape((absu2), size(XC‚ÇÇ)...), label="", colormap=:jet)
      Plots.contourf!(plt3[count], XC‚ÇÉ, ZC‚ÇÉ, reshape((absu3), size(XC‚ÇÉ)...), label="", colormap=:jet)
      # Plots.annotate!(plt3[count], 10, -0.2, ("Layer 1", 10, :white))
      # Plots.annotate!(plt3[count], 10, -1.8, ("Layer 2", 10, :white))
      # Plots.annotate!(plt3[count], 14, -3.2, ("Layer 3", 10, :white))
      # Plots.annotate!(plt3[count], 16.2, -2, ("\$ \\sigma_0^v = 8\$", 10, :white))
      Plots.plot!(plt3[count], [0,x‚ÇÅ[end]],[-3.34,-2.47], lw=2, lc=:white, label="")
      Plots.plot!(plt3[count], [0,x‚ÇÅ[end]],[z‚ÇÅ[1],z‚ÇÅ[1]], lw=2, lc=:white, label="")
      Plots.vline!(plt3[count], [(x‚ÇÅ[1]+0.9*L‚Çï)], lw=1, lc=:white, ls=:dash, label="")
      Plots.vline!(plt3[count], [(x‚ÇÅ[1]+0.1*L‚Çï)], lw=1, lc=:white, ls=:dash, label="", legend=:topleft, size=(900,200))      
      Plots.xlims!(plt3[count], (0.0,x‚ÇÅ[end]))
      Plots.ylims!(plt3[count], (z‚ÇÇ[1],z‚ÇÅ[end]))
      Plots.xlabel!(plt3[count], "\$x\$ (in km)")
      Plots.ylabel!(plt3[count], "\$z\$ (in km)")
      count+=1
    end

    maxvals[i] = sqrt(u1ref‚ÇÅ'*Hqr‚ÇÅ*u1ref‚ÇÅ + u2ref‚ÇÅ'*Hqr‚ÇÅ*u2ref‚ÇÅ +
                      u1ref‚ÇÇ'*Hqr‚ÇÇ*u1ref‚ÇÇ + u2ref‚ÇÇ'*Hqr‚ÇÇ*u2ref‚ÇÇ + 
                      u1ref‚ÇÉ'*Hqr‚ÇÉ*u1ref‚ÇÉ + u2ref‚ÇÉ'*Hqr‚ÇÉ*u2ref‚ÇÉ)
  end
  # end every 10
end  

u1ref‚ÇÅ,u2ref‚ÇÅ = split_solution(Z‚ÇÄ[1:12*(prod(ùõÄ‚ÇÅ.mn))], ùõÄ‚ÇÅ.mn, 12);
u1ref‚ÇÇ,u2ref‚ÇÇ =  split_solution(Z‚ÇÄ[12*(prod(ùõÄ‚ÇÅ.mn))+1:12*(prod(ùõÄ‚ÇÅ.mn))+12*(prod(ùõÄ‚ÇÇ.mn))], ùõÄ‚ÇÇ.mn, 12);
u1ref‚ÇÉ,u2ref‚ÇÉ =  split_solution(Z‚ÇÄ[12*(prod(ùõÄ‚ÇÅ.mn))+12*(prod(ùõÄ‚ÇÇ.mn))+1:12*(prod(ùõÄ‚ÇÅ.mn))+12*(prod(ùõÄ‚ÇÇ.mn))+12*(prod(ùõÄ‚ÇÉ.mn))], ùõÄ‚ÇÉ.mn, 12);
absu1 = sqrt.((u1ref‚ÇÅ.^2) + (u2ref‚ÇÅ.^2)) ;
absu2 = sqrt.((u1ref‚ÇÇ.^2) + (u2ref‚ÇÇ.^2)) ;
absu3 = sqrt.((u1ref‚ÇÉ.^2) + (u2ref‚ÇÉ.^2)) ;

# Get the x-and-y coordinates separately
XC‚ÇÅ = getX.(XZ‚ÇÅ); ZC‚ÇÅ = getY.(XZ‚ÇÅ) 
XC‚ÇÇ = getX.(XZ‚ÇÇ); ZC‚ÇÇ = getY.(XZ‚ÇÇ) 
XC‚ÇÉ = getX.(XZ‚ÇÉ); ZC‚ÇÉ = getY.(XZ‚ÇÉ)

# scalefontsizes()

plt3_1 = Plots.plot();
# 
Plots.contourf!(plt3_1, XC‚ÇÅ, ZC‚ÇÅ, reshape((absu1), size(XC‚ÇÅ)...), label="", colormap=:jet)
Plots.contourf!(plt3_1, XC‚ÇÇ, ZC‚ÇÇ, reshape((absu2), size(XC‚ÇÇ)...), label="", colormap=:jet)
Plots.contourf!(plt3_1, XC‚ÇÉ, ZC‚ÇÉ, reshape((absu3), size(XC‚ÇÉ)...), label="", colormap=:jet)
Plots.plot!(plt3_1, [0,x‚ÇÅ[end]],[-3.34,-2.47], lw=2, lc=:white, label="")
Plots.plot!(plt3_1, [0,x‚ÇÅ[end]],[z‚ÇÅ[1],z‚ÇÅ[1]], lw=2, lc=:white, label="")
Plots.vline!(plt3_1, [(x‚ÇÅ[1]+0.9*L‚Çï)], lw=1, lc=:white, ls=:dash, label="")
Plots.vline!(plt3_1, [(x‚ÇÅ[1]+0.1*L‚Çï)], lw=1, lc=:white, ls=:dash, label="", legend=:topleft, size=(600,200))
# Plots.vspan!(plt3_1, [(x‚ÇÅ[1]+0.9*L‚Çï),x‚ÇÅ[end]], fillalpha=0.5, fillcolor=:orange, label="")
Plots.xlims!(plt3_1, (x‚ÇÅ[1],x‚ÇÅ[end]))
Plots.ylims!(plt3_1, (z‚ÇÇ[1],z‚ÇÅ[end]))
Plots.xlabel!(plt3_1, "\$x\$ (in km)")
Plots.ylabel!(plt3_1, "\$z\$ (in km)")

plt4 = Plots.contourf(X‚ÇÇ, Z‚ÇÇ, vp‚ÇÇ, label="", colormap=:jet)
Plots.contourf!(plt4, X‚ÇÅ, Z‚ÇÅ, vp‚ÇÅ, label="", colormap=:jet, size=(600,200))
Plots.xlims!(plt4, (x‚ÇÅ[1],x‚ÇÅ[end]))
Plots.ylims!(plt4, (z‚ÇÇ[1],z‚ÇÅ[end]))
Plots.xlabel!(plt4, "\$x\$ (in km)")
Plots.ylabel!(plt4, "\$z\$ (in km)")

# scalefontsizes(3)
plt5 = Plots.plot(LinRange(0,tf,ntime), maxvals, label="", lw=2)
Plots.xlabel!(plt5, "Time \$t\$")
Plots.ylabel!(plt5, "\$ \\| u \\|_{\\mathbf{H}} \$")

plt6 = Plots.contour(XC‚ÇÇ, ZC‚ÇÇ, œÉ·µ•.(XZ‚ÇÇ), label="", colormap=:jet)
Plots.contour!(plt6, XC‚ÇÅ, ZC‚ÇÅ, œÉ·µ•.(XZ‚ÇÅ), label="", colormap=:jet)
Plots.contour!(plt6, XC‚ÇÉ, ZC‚ÇÉ, œÉ·µ•.(XZ‚ÇÉ), label="", colormap=:jet)
Plots.annotate!(plt6, 10, -0.2, ("Layer 1", 15, :black))
Plots.annotate!(plt6, 10, -1.8, ("Layer 2", 15, :black))
Plots.annotate!(plt6, 14, -3.2, ("Layer 3", 15, :black))
Plots.annotate!(plt6, 16.2, -2, ("PML", 15, :black, :bold))
Plots.plot!(plt6, [0,x‚ÇÅ[end]],[-3.34,-2.47], lw=2, lc=:black, label="")
Plots.plot!(plt6, [0,x‚ÇÅ[end]],[z‚ÇÅ[1],z‚ÇÅ[1]], lw=2, lc=:black, label="")
Plots.vline!(plt6, [(x‚ÇÅ[1]+0.9*L‚Çï)], lw=1, lc=:black, ls=:dash, label="")
Plots.vline!(plt6, [(x‚ÇÅ[1]+0.1*L‚Çï)], lw=1, lc=:black, ls=:dash, label="", legend=:topleft, size=(900,300))
# Plots.vspan!(plt3, [(x‚ÇÅ[1]+0.9*L‚Çï),x‚ÇÅ[end]], fillalpha=0.5, fillcolor=:orange, label="")
Plots.xlims!(plt6, (x‚ÇÅ[1],x‚ÇÅ[end]))
Plots.ylims!(plt6, (z‚ÇÇ[1],z‚ÇÅ[end]))
Plots.xlabel!(plt6, "\$x\$ (in km)")
Plots.ylabel!(plt6, "\$z\$ (in km)")