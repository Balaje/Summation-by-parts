# include("2d_elasticity_problem.jl");
using SBP
using StaticArrays
using LinearAlgebra
using SparseArrays
using ForwardDiff
using Plots

using LoopVectorization
using SplitApplyCombine

"""
Flatten the 2d function as a single vector for the time iterations.
  (...Basically convert vector of vectors to matrix...)
"""
eltocols(v::Vector{SVector{dim, T}}) where {dim, T} = vec(reshape(reinterpret(Float64, v), dim, :)');

"""
Function to generate the stiffness matrices
"""
function ùêä!(Pqr, ùõÄ::DiscreteDomain, ùê™ùê´)
  Œ©(qr) = S(qr, ùõÄ.domain)
  detJ(x) = (det‚àòJ)(x,Œ©)    

  m, n = size(ùê™ùê´)
  sbp_q = SBP_1_2_CONSTANT_0_1(n)
  sbp_r = SBP_1_2_CONSTANT_0_1(m)
  sbp_2d = SBP_1_2_CONSTANT_0_1_0_1(sbp_q, sbp_r)
  
  # Get the material property matrix evaluated at grid points    
  # Pqr = P2R.(ùí´,Œ©,ùê™ùê´) 

  # Elasticity bulk differential operator  
  ùêè = P·¥±(Pqr).A 

  # Elasticity Traction Operators
  ùêìq‚ÇÄ, ùêìr‚ÇÄ, ùêìq‚Çô, ùêìr‚Çô = T·¥±(Pqr, ùõÄ, [-1,0]).A, T·¥±(Pqr, ùõÄ, [0,-1]).A, T·¥±(Pqr, ùõÄ, [1,0]).A, T·¥±(Pqr, ùõÄ, [0,1]).A   

  # The surface Jacobians on the boundary
  SJr‚ÇÄ, SJq‚ÇÄ, SJr‚Çô, SJq‚Çô = Js(ùõÄ, [0,-1];  X=I(2)), Js(ùõÄ, [-1,0];  X=I(2)), Js(ùõÄ, [0,1];  X=I(2)), Js(ùõÄ, [1,0];  X=I(2))   
  
  # The norm-inverse on the boundary
  ùêáq‚ÇÄ‚Åª¬π, ùêáq‚Çô‚Åª¬π, ùêár‚ÇÄ‚Åª¬π, ùêár‚Çô‚Åª¬π = sbp_2d.norm
  
  # Bulk Jacobian
  ùêâ = Jb(ùõÄ, ùê™ùê´)
  ùêâ‚Åª¬π = ùêâ\I(size(ùêâ,1))

  SAT = (-(I(2) ‚äó ùêáq‚ÇÄ‚Åª¬π)*SJq‚ÇÄ*(ùêìq‚ÇÄ) + (I(2) ‚äó ùêáq‚Çô‚Åª¬π)*SJq‚Çô*(ùêìq‚Çô) -(I(2) ‚äó ùêár‚ÇÄ‚Åª¬π)*SJr‚ÇÄ*(ùêìr‚ÇÄ) + (I(2) ‚äó ùêár‚Çô‚Åª¬π)*SJr‚Çô*(ùêìr‚Çô))

  # The SBP-SAT Formulation    
  ùêâ‚Åª¬π*(ùêè - SAT)
end


"""
A non-allocating implementation of the RK4 scheme
"""
function RK4_1!(M, sol)  
  X‚ÇÄ, k‚ÇÅ, k‚ÇÇ, k‚ÇÉ, k‚ÇÑ = sol
  # k1 step  
  mul!(k‚ÇÅ, M, X‚ÇÄ);
  # k2 step
  mul!(k‚ÇÇ, M, k‚ÇÅ, 0.5*Œît, 0.0); mul!(k‚ÇÇ, M, X‚ÇÄ, 1, 1);
  # k3 step
  mul!(k‚ÇÉ, M, k‚ÇÇ, 0.5*Œît, 0.0); mul!(k‚ÇÉ, M, X‚ÇÄ, 1, 1);
  # k4 step
  mul!(k‚ÇÑ, M, k‚ÇÉ, Œît, 0.0); mul!(k‚ÇÑ, M, X‚ÇÄ, 1, 1);
  # Final step
  @turbo for i=1:lastindex(X‚ÇÄ)
    X‚ÇÄ[i] = X‚ÇÄ[i] + (Œît/6)*(k‚ÇÅ[i] + k‚ÇÇ[i] + k‚ÇÉ[i] + k‚ÇÑ[i])
  end
  X‚ÇÄ
end

"""
Function to split the solution into the corresponding variables
"""
function split_solution(X, MN)  
  M,N = MN
  res = splitdimsview(reshape(X, (M*N, 4)))
  u1, u2 = res[1:2]
  (u1,u2)
end

using MAT
vars = matread("./examples/MarmousiModel/marmousi2_downsampled_10.mat");
X = vars["X_e"]
Z = vars["Z_e"]
x = X[1,:]
z = Z[:,1]
m, n = size(X);
XZ = [[X[i,j], Z[i,j]] for i=1:m, j=1:n] # X-Z coordinates from data

## Define the physical domain
c‚ÇÄ(r) = @SVector [x[1], z[1] + (z[end]-z[1])*r] # Left boundary 
c‚ÇÅ(q) = @SVector [x[1] + (x[end]-x[1])*q, z[1]] # Bottom boundary
c‚ÇÇ(r) = @SVector [x[end], z[1] + (z[end]-z[1])*r] # Right boundary
c‚ÇÉ(q) = @SVector [x[1] + (x[end]-x[1])*q, z[end]] # Top boundary
domain = domain_2d(c‚ÇÄ, c‚ÇÅ, c‚ÇÇ, c‚ÇÉ)
ùõÄ = DiscreteDomain(domain, (n,m));
Œ©(qr) = S(qr, ùõÄ.domain);

ùê™ùê´ = generate_2d_grid((n,m));
using Test
@test Œ©.(ùê™ùê´) ‚âà XZ;

##### ##### ##### ##### ##### ##### ##### ##### 
#   Build the material properties function    #
##### ##### ##### ##### ##### ##### ##### #####
function Pt(ùí´, ùíÆ, qr)    
  invJ = J‚Åª¬π(qr, ùíÆ)
  detJ = (det‚àòJ)(qr, ùíÆ)
  S = invJ ‚äó I(2)
  m,n = size(S)
  SMatrix{m,n,Float64}(S'*ùí´*S)*detJ
end

vp = vars["vp_e"];
vs = vars["vs_e"];
rho = vars["rho_e"];
mu = (vs.^2).*rho;
lambda = (vp.^2).*rho - 2*mu;
C‚ÇÅ‚ÇÅ = C‚ÇÇ‚ÇÇ = 2*mu + lambda;
C‚ÇÉ‚ÇÉ = mu;
C‚ÇÅ‚ÇÇ = lambda;

P = [@SMatrix [C‚ÇÅ‚ÇÅ[i,j] 0 0 C‚ÇÅ‚ÇÇ[i,j]; 0 C‚ÇÉ‚ÇÉ[i,j] C‚ÇÉ‚ÇÉ[i,j] 0; 0 C‚ÇÉ‚ÇÉ[i,j] C‚ÇÉ‚ÇÉ[i,j] 0; C‚ÇÅ‚ÇÇ[i,j] 0  0 C‚ÇÇ‚ÇÇ[i,j]] for i=1:m, j=1:n]
P_t= [Pt(P[i,j], Œ©, ùê™ùê´[i,j]) for i=1:m, j=1:n];

stima = ùêä!(P_t, ùõÄ, ùê™ùê´);
massma = I(2) ‚äó spdiagm(vec(rho).^-1);
U‚ÇÄ(p) = @SVector [exp(-1e-3*((p[1]-8493.2)^2 + 4*(p[2]-(-1973.42))^2)) + exp(-1e-3*((p[1]-3000)^2 + 4*(p[2]-(-1000))^2)) + exp(-1e-3*((p[1]-14000)^2 + 4*(p[2]-(-3000))^2)), 
                 -exp(-1e-3*((p[1]-8493.2)^2 + 4*(p[2]-(-1973.42))^2)) - exp(-1e-3*((p[1]-3000)^2 + 4*(p[2]-(-1000))^2)) + exp(-1e-3*((p[1]-14000)^2 + 4*(p[2]-(-3000))^2))];
V‚ÇÄ(p) = @SVector [0.0,0.0]

const Œît = 1e-3
tf = 1.0
ntime = ceil(Int, tf/Œît)
let
  t = 0.0
  X‚ÇÄ = eltocols(vec(U‚ÇÄ.(XZ)))
  Y‚ÇÄ = eltocols(vec(V‚ÇÄ.(XZ)))
  global Z‚ÇÄ = vcat(X‚ÇÄ, Y‚ÇÄ)
  global maxvals = zeros(Float64, ntime)
  k‚ÇÅ = zeros(Float64, length(Z‚ÇÄ))
  k‚ÇÇ = zeros(Float64, length(Z‚ÇÄ))
  k‚ÇÉ = zeros(Float64, length(Z‚ÇÄ))
  k‚ÇÑ = zeros(Float64, length(Z‚ÇÄ)) 
  M = massma*stima
  K = [zero(M) I(size(M,1)); M zero(M)]
  # @gif for i=1:ntime
  for i=1:ntime
    sol = Z‚ÇÄ, k‚ÇÅ, k‚ÇÇ, k‚ÇÉ, k‚ÇÑ
    Z‚ÇÄ = RK4_1!(K, sol)    
    t += Œît        
    (i%100==0) && println("Done t = "*string(t)*"\t max(sol) = "*string(maximum(Z‚ÇÄ)))

    # Plotting part for 
    u1ref‚ÇÅ,u2ref‚ÇÅ = split_solution(Z‚ÇÄ, (m,n))
    # plt3 = scatter(Tuple.(XZ |> vec), zcolor=vec(u1ref‚ÇÅ), colormap=:redsblues, ylabel="y(=r)", markersize=4, msw=0.0, label="", size=(3200,800));  
    # title!(plt3, "Time t="*string(t))

    maxvals[i] = max(maximum(abs.(u1ref‚ÇÅ)), maximum(abs.(u2ref‚ÇÅ)))
  end
  # end  every 10 
end  

using ColorSchemes
u1ref‚ÇÅ,u2ref‚ÇÅ = split_solution(Z‚ÇÄ, (m,n))
absu1 = sqrt.(u1ref‚ÇÅ.^2 + u2ref‚ÇÅ.^2);
plt3 = heatmap(x, z, reshape(absu1, (m,n)), colormap=:matter, ylabel="y(=r)", label="", size=(800,800), xtickfontsize=18, ytickfontsize=18, bottommargin=12*Plots.mm, topmargin=15*Plots.mm, rightmargin=20*Plots.mm, titlefontsize=20, clims=(0, 0.02));  
xlims!(plt3, (x[1], x[end]))  
ylims!(plt3, (z[1], z[end]))  
title!(plt3, "\$|u(x,y)|\$ at Time t="*string(tf))

plt4 = heatmap(x, z, vp, ylabel="y(=r)", markersize=4, msw=0.0, label="", size=(800,800), xtickfontsize=18, ytickfontsize=18, bottommargin=12*Plots.mm, titlefontsize=18, topmargin=15*Plots.mm, rightmargin=12*Plots.mm);   
xlims!(plt4, (x[1], x[end]))  
ylims!(plt4, (z[1], z[end])) 
title!(plt4, "Density of the material")

plot(plt4, plt3, layout=(2,1), size=(1600,1600), rightmargin=12*Plots.mm)