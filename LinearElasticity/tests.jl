######################################################################
# Contains some tests to check the correctness of the implementation
######################################################################

using Test

@testset "Check the 1d SBP operators (first and second derivatives)" begin
  N = 10
  x = LinRange(0,1,N)
  fx = map(x->x^2, x)
  D1 = SBP(N)[2]
  D2 = SBP(N)[3][1]
  @test D1*fx ≈ map(x->2x, x)
  @test D2*fx ≈ map(x->2, x)
end;

@testset "Check the variable coefficient second derivative (MATLAB->Julia)" begin

  # Check for constant coefficient  
  D2 = SBP(40)[3][1];
  D2_var = SBP_VARIABLE_4(40, ones(40))[2];
  @test D2 ≈ D2_var

  # Check with MATLAB result for variable coefficient
  DD2fx_MATLAB = [ -0.000309393974552, 0.000269728080379, 0.001047548591239, 0.003591787192802, 0.008631298572127, 0.016858005023686,
  0.029130632680928, 0.046258365784993, 0.069050388577016, 0.098315885298133, 0.134864040189485, 0.179504037492204,
  0.233045061447426, 0.296296296296299, 0.370066926279945, 0.455166135639508, 0.552403108616133, 0.662587029450950,
  0.786527082385057, 0.925032451659644, 1.078912321515873, 1.248975876194768, 1.436032299937642, 1.640890776985447,
  1.864360491579454, 2.107250627960592, 2.370370370370495, 2.654528903049414, 2.960535410239547, 3.289199076181006,
  3.641329085116155, 4.017734621284681, 4.419224868929099, 4.846609012289136, 5.300696235607647, 5.782295723124477,
  6.291085452539143, 6.830687998707361, 7.405384446804646, 7.987005453068377]
  x = LinRange(0,1,40);
  fx = x.^2;
  Ax = x.^3;
  DD2 = SBP_VARIABLE_4(40, Ax)[2];
  DD2fx = DD2*fx
  @test DD2fx ≈ DD2fx_MATLAB
end;