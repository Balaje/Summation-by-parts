using SparseArrays
using LinearAlgebra
using StaticArrays
using Test

# Load the package
using SummationByPartsPML

###### ###### ###### ###### ###### ###### ###### ###### ###### ###### 
# Test out some 1D SBP operators
# We take a polynomial function f(x) = x^2. 
# This way the 4th order SBP operator is accurate to machine error
###### ###### ###### ###### ###### ###### ###### ###### ###### ###### 

f(x) = x^2
f‚Ä≤(x) = 2.0x
f‚Ä≤‚Ä≤(x) = 2.0

SBP4 = SBP4_1D(100)
x = LinRange(0,1,100)
D‚Çì = SBP4.D1
D‚Çì‚Çì, D‚Çì‚Çì‚Ä≤ = SBP4.D2
S‚Çì = SBP4.S;
H = SBP4.norm;
ùêà, E‚ÇÄ, E‚Çô = SBP4.E

@testset "Testing 1d Identity operator" begin @test ùêà*f.(x) ‚âà f.(x) end;
@testset "Testing 1d First Derivative operator" begin @test D‚Çì*f.(x) ‚âà f‚Ä≤.(x) end;
@testset "Testing 1d Second Derivative operator" begin @test D‚Çì‚Çì*f.(x) ‚âà f‚Ä≤‚Ä≤.(x) end;
@testset "Testing 1d Second Derivative operator (Fully compatible)" begin @test D‚Çì‚Çì‚Ä≤*f.(x) ‚âà f‚Ä≤‚Ä≤.(x) end;
@testset "Testing 1d Boundary Derivative operator" begin @test  S‚Çì*f.(x) ‚âà (E‚ÇÄ*f‚Ä≤.(x) + E‚Çô*f‚Ä≤.(x)) end;

###### ###### ###### ###### ###### ###### ###### ###### ###### ###### ###### ###### ###### ######  
# Program to solve the hyperbolic scalar equation 
#   u‚Çú + a(u‚Çì) = œµ(u‚Çì‚Çì), 0 ‚â§ x ‚â§ 1, t > 0,
#     Œ±(u(0,t)) + u‚Çì(0,t) = g‚ÇÄ(t)
#     Œ≤(u(1,t)) + u‚Çì(1,t) = g‚ÇÅ(t)
# Some sample diagonal norms are shown in Mattsson and Nordstrom, 2004 (Appendix A)
# Let us test out some of the SBP operator. We use the RK4 scheme for the temporal discretization.
###### ###### ###### ###### ###### ###### ###### ###### ###### ###### ###### ###### ###### ######  

"""
The 4th order Runge Kutta scheme (for v‚Çú = f(t,v))
"""
function RK4(g::Function, args::Tuple{T, T, AbstractVector{T}, AbstractVector{T}}, kwargs) where T<:Number
  Œît, t, u, F = args
  k‚ÇÅ = g(t, u, F, kwargs)
  k‚ÇÇ = g(t + 0.5*Œît, u + 0.5*Œît*k‚ÇÅ, F, kwargs)
  k‚ÇÉ = g(t + 0.5*Œît, u + 0.5*Œît*k‚ÇÇ, F, kwargs)
  k‚ÇÑ = g(t + Œît, u + Œît*k‚ÇÉ, F, kwargs)    
  (u + (Œît)/6*(k‚ÇÅ + 2k‚ÇÇ + 2k‚ÇÉ + k‚ÇÑ))  
end

# Problem parameters
const a = 1.0
const c = 2.0
const œµ = 0.1
const w = sqrt(c^2 - a^2)/(2œµ)
const b = (c-a)/(2œµ)
# Mixed boundary condition on x=0, Neumann boundary cndition on x=1
const Œ± = 1.0
const Œ≤ = 0.0
u(x,t) = sin(w*(x-c*t))*exp(-b*x)
f(x) = u(x,0)
g‚ÇÄ(t) = (b-Œ±)*sin(w*c*t) + w*cos(w*c*t)
g‚ÇÅ(t) = Œ≤*sin(w*(1-c*t))*exp(-b) + exp(-b)*w*cos(w*(1-c*t)) - b*exp(-b)*sin(w*(1-c*t))

"""
The RHS function for the Runge Kutta Iteration
"""
function f(t::Float64, v::AbstractVector{T}, F::AbstractVector{T}, kwargs) where T <: Number  
  coeffs, sbp, œÑ‚ÇÄ‚ÇÅ, ics = kwargs # Get all the arguments
  a,œµ,Œ±,Œ≤ = coeffs # Problem parameters
  œÑ‚ÇÄ, œÑ‚ÇÅ = œÑ‚ÇÄ‚ÇÅ # Penalty parameters
  g‚ÇÄ, g‚ÇÅ = ics # Initial conditions
  # Unpack all the parameters    
  ùêà, E‚ÇÄ, E‚Çô = sbp.E; # Identity operators
  H = sbp.norm;    D‚Çì = sbp.D1;    S‚Çì = sbp.S;    
  D‚Çì‚Çì = sbp.D2[1] # Using the non-fully compatible operator for approximating the second derivative 
  H‚Åª¬π = H\ùêà # Inverse of the norm    
  e‚ÇÄ = diag(E‚ÇÄ)
  e‚Çô = diag(E‚Çô)
  ùê†‚ÇÄ = g‚ÇÄ(t);    ùê†‚ÇÅ = g‚ÇÅ(t) # Initial conditions
  
  # Paper-like expression with Julia syntax
  -a*D‚Çì*v + œµ*D‚Çì‚Çì*v - œÑ‚ÇÄ*(H‚Åª¬π*(E‚ÇÄ*(Œ±*ùêà+S‚Çì)*v - e‚ÇÄ*ùê†‚ÇÄ)) - œÑ‚ÇÅ*(H‚Åª¬π*(E‚Çô*(Œ≤*ùêà+S‚Çì)*v - e‚Çô*ùê†‚ÇÅ)) + F
end

# Begin solving the problem
# Temporal Discretization parameters
tf = 1.0
Œît = 5e-5
ntime = ceil(Int64,tf/Œît)
# Penalty parameters
œÑ‚ÇÄ = -œµ
œÑ‚ÇÅ = œµ
# Spatial Discretization

println("");
println("Solving a hyperbolic IBVP (Mattsson and Nordstrom, 2004) with N = [41,81,161,321]...");
println("");

N = [41, 81, 161, 321]  
L¬≤Error = zeros(Float64, length(N)); # Discrete L¬≤ Error
for (n,i) ‚àà zip(N,1:length(N))
  let
    x = LinRange(0,1,n)
    # Get the SBP operators using the package
    sbp = SBP4_1D(n) 
    # Norm matrix to compute the error
    H = sbp.norm 
    let
      u‚ÇÄ = f.(x);  t = 0.0
      # Time loop
      for i=1:ntime        
        u‚ÇÄ = RK4(f, (Œît, t, u‚ÇÄ, zero(x)), ((a,œµ,Œ±,Œ≤), sbp, (œÑ‚ÇÄ, œÑ‚ÇÅ), (g‚ÇÄ, g‚ÇÅ)))    
        t = t+Œît
      end                  
      e = u.(x,tf) - u‚ÇÄ
      L¬≤Error[i] = sqrt(e'*H*e)
    end
    println("Done n = "*string(n))
  end
end

println("");
println("L¬≤Error = ", L¬≤Error)
rate = log2.(L¬≤Error[1:end-1]./L¬≤Error[2:end]);
println("Rate = ", rate)
println("");

# Check if the rate is approximately 4
@testset "Check if rate is approximately 4 after solving the 1d hyperbolic problem." begin @test abs(sum(rate)/length(rate) - 4.0) < 0.2 end;