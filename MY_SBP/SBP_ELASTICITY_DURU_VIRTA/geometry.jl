# Module to define the computational domain
using NLsolve
using ForwardDiff
using LinearAlgebra
using StaticArrays

"""
Function to compute the intersection point of the two curves c‚ÇÅ,c‚ÇÇ
P‚ÇÅ‚ÇÇ = P(c‚ÇÅ,c‚ÇÇ)
"""
function P(c‚ÇÅ, c‚ÇÇ; guess=[0.0,0.0])   
  function f!(F, x)
    F[1] = c‚ÇÅ(x[1])[1] - c‚ÇÇ(x[2])[1]
    F[2] = c‚ÇÅ(x[1])[2] - c‚ÇÇ(x[2])[2]
  end  
  x0 = guess
  nlsolve(f!, x0, autodiff=:forward).zero
end

"""
Parametric Representation of the boundary
Define c‚ÇÅ, c‚ÇÇ, c‚ÇÉ, c‚ÇÑ
"""
c‚ÇÅ(u) = @SVector [0.1*sin(2œÄ*u), u]
c‚ÇÉ(u) = @SVector [1.0 + 0.1*sin(2œÄ*u), u]
c‚ÇÇ(v) = @SVector [v, 0.1*sin(2œÄ*v)]
c‚ÇÑ(v) = @SVector [v, 1.0 + 0.1*sin(2œÄ*v)]

# Get the intersection points
const P‚ÇÅ‚ÇÇ = SVector{2}(P(c‚ÇÅ,c‚ÇÇ));
const P‚ÇÉ‚ÇÑ = SVector{2}(P(c‚ÇÉ,c‚ÇÑ));
const P‚ÇÑ‚ÇÅ = SVector{2}(P(c‚ÇÑ,c‚ÇÅ));
const P‚ÇÇ‚ÇÉ = SVector{2}(P(c‚ÇÇ,c‚ÇÉ));

"""
The transfinite interpolation formula
"""
ùíÆ(x) = (1-x[2])*c‚ÇÅ(x[1]) + x[2]*c‚ÇÉ(x[1]) + (1-x[1])*c‚ÇÇ(x[2]) + x[1]*c‚ÇÑ(x[2]) - 
((1-x[1])*(1-x[2])*P‚ÇÅ‚ÇÇ + x[1]*x[2]*P‚ÇÉ‚ÇÑ + x[1]*(1-x[2])*P‚ÇÑ‚ÇÅ + (1-x[1])*x[2]*P‚ÇÇ‚ÇÉ);

"""
Function to return the Jacobian of the transformation
"""
function J(S,r)
  SMatrix{2,2,Float64}(ForwardDiff.jacobian(S,r))
end

"""
Function to return the inverse of the Jacobian
"""
function J‚Åª¬π(S, r)
  inv(J(S,r))
end

"""
Fancy defintion of the Kronecker product
"""
‚äó(A,B) = kron(A,B)

"""
Function to return the material tensors in the transformed coordinates
"""
function t(S, r)  
  invJ = J‚Åª¬π(S, r)    
  Pr = ùí´(r)
  S = invJ ‚äó I(2)
  S*Pr*S'
end
A‚Çú(r) = t(ùíÆ,r)[1:2, 1:2];
B‚Çú(r) = t(ùíÆ,r)[3:4, 3:4];
C‚Çú(r) = t(ùíÆ,r)[1:2, 3:4];

"""
Evaluate the material tensor on the grid and sort accordingly
"""
function ToGrid(A::Function, R::AbstractVecOrMat{SVector{2,T}}) where T<:Number
  AX = A.(R)
  (getindex.(AX, 1, 1), getindex.(AX, 1, 2), getindex.(AX, 2, 1), getindex.(AX, 2, 2))
end