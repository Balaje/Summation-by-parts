##### ###### ###### ###### ###### ###### ###### #
## Example 2 in Mattsson and Nordstrom


include("include.jl")

# Define the problem
const œµ = 0.1
const Œõ = @SMatrix [‚àö(2) 0; 0 -‚àö(2)]
const ùíü = œµ/(2‚àö(2))*(@SMatrix [‚àö(2)-1 1; 1 ‚àö(2)+1]) # which is ÃÉD in the paper, i.e., the diffusion tensor
const Œ± = ‚àö(2) - 1
# Some exact solution for testing
const w = 10
const b = 1
const c = 1
v(x,t) =  [-sin(w*(x-c*t))*exp(-b*x), sin(w*(x+c*t))*exp(-b*x)]'

"""
Function to compute the boundary data at given time t:
Returns a tuple that corresponds to 
  (g‚ÇÄ(t), g‚ÇÅ(t))
"""
function BoundaryData(t)
  I‚ÇÄ = @SMatrix [1 0; 0 0];
  I‚ÇÅ = @SMatrix [0 0; 0 1];
  I‚ÇÇ = @SMatrix [1 0; 0 1];
  I·µ£ = @SMatrix [0 1; 1 0];
  v‚ÇÄ = @SVector [sin(w*c*t), sin(w*c*t)]
  ‚àÇ‚Çìv‚ÇÄ = @SVector [-w*cos(w*c*t) + b*sin(w*c*t), w*cos(w*c*t) - b*sin(w*c*t)]
  v‚ÇÅ = @SVector [-sin(w*(1-c*t))*exp(-b); sin(w*(1+c*t))*exp(-b)]
  ‚àÇ‚Çìv‚ÇÅ = @SVector [-exp(-b)*w*cos(w*(1-c*t)) + b*exp(-b)*sin(w*(1-c*t)), exp(-b)*w*cos(w*(1+c*t)) - b*exp(-b)*sin(w*(1+c*t))]
  (I‚ÇÄ*Œõ*v‚ÇÄ + (I‚ÇÅ - I‚ÇÄ)*ùíü*‚àÇ‚Çìv‚ÇÄ, I‚ÇÅ*Œõ*v‚ÇÅ + (I‚ÇÄ - (I‚ÇÇ+Œ±*I·µ£)*I‚ÇÅ)*ùíü*‚àÇ‚Çìv‚ÇÅ)
end

"""
The non-zero forcing term in the RHS of the PDE
"""
function F(x,t)
  ‚àÇ‚Çúv = @SVector [w*c*cos(w*(x-c*t))*exp(-b*x), w*c*cos(w*(x+c*t))*exp(-b*x)]
  ‚àÇ‚Çìv = @SVector [-exp(-b*x)*w*cos(w*(x-c*t)) + b*exp(-b*x)*sin(w*(x-c*t)), 
                  exp(-b*x)*w*cos(w*(x+c*t)) - b*exp(-b*x)*sin(w*(x+c*t))]
  ‚àÇ‚Çì‚Çìv = @SVector [-exp(-b*x)*w*(-w*sin(w*(x-c*t))) + b*exp(-b*x)*w*cos(w*(x-c*t)) + b*(-b*exp(-b*x)*sin(w*(x-c*t))+exp(-b*x)*w*cos(w*(x-c*t))), 
                   exp(-b*x)*w*(-w*sin(w*(x+c*t))) - b*exp(-b*x)*w*cos(w*(x+c*t)) - b*(-b*exp(-b*x)*sin(w*(x+c*t))+exp(-b*x)*w*cos(w*(x+c*t)))]
  (‚àÇ‚Çúv + Œõ*‚àÇ‚Çìv - ùíü*‚àÇ‚Çì‚Çìv)'
end

"""
Initial condition function
"""
V‚ÇÄ(x) = v(x,0)

"""
Fancy definition of the Kronecker product.
"""
‚äó(A, B) = Base.kron(A,B)

# Begin solving the problem
"""
RHS of the discrete time-stepping
"""
function g(t::Float64, v::AbstractVector{T}, F::AbstractVector{T}, kwargs) where T <: Number  
  sbp, pterms = kwargs
  Œ£‚ÇÄ, Œ£‚ÇÅ = pterms
  HHinv, D1, D2s, S, unit_vecs = sbp
  _, Hinv = HHinv  
  E‚ÇÄ, E‚Çô, e‚ÇÄ, e‚Çô, _ = unit_vecs
  D2, _ = D2s

  I‚ÇÄ = @SMatrix [1 0; 0 0];
  I‚ÇÅ = @SMatrix [0 0; 0 1];
  I‚ÇÇ = @SMatrix [1 0; 0 1];
  I·µ£ = @SMatrix [0 1; 1 0];
  L‚ÇÄ = (I‚ÇÄ*Œõ) ‚äó E‚ÇÄ + ((I‚ÇÅ - I‚ÇÄ)*ùíü) ‚äó (E‚ÇÄ*S)
  L‚ÇÅ = (I‚ÇÅ*Œõ) ‚äó E‚Çô + (I‚ÇÄ - (I‚ÇÇ + Œ±*I·µ£)*I‚ÇÅ*ùíü) ‚äó (E‚Çô*S)

  g‚ÇÄ, g‚ÇÅ = BoundaryData(t)

  -(Œõ ‚äó D1)*v + (ùíü ‚äó D2)*v + F + (Œ£‚ÇÄ ‚äó Hinv)*(L‚ÇÄ*v - g‚ÇÄ ‚äó e‚ÇÄ) + (Œ£‚ÇÅ ‚äó Hinv)*(L‚ÇÅ*v - g‚ÇÅ ‚äó e‚Çô)
end


# Temporal Discretization parameters
tf = 0.1
Œît = 5e-4
ntime = ceil(Int64,tf/Œît)
# Spatial discretization parameters
n = 20;
Œ£‚ÇÄ = [-1 0; 0 1];
Œ£‚ÇÅ = [-1 Œ±; 0 1];
pterms = Œ£‚ÇÄ, Œ£‚ÇÅ;
plt = plot()
plt1 = plot()
let
  x = LinRange(0,1,n+1)
  sbp = SBP(n+1);
  H = sbp[1][1]; # Norm matrix for the l2error
  args = sbp, pterms
  let
    v‚ÇÄ = vec(reduce(vcat, V‚ÇÄ.(x)))
    global v‚ÇÅ = zero(v‚ÇÄ)  
    t = 0.0
    for i=1:ntime
      Fvec = vec(reduce(vcat, F.(x,t)))
      fargs = Œît, t, v‚ÇÄ, Fvec
      v‚ÇÄ = RK4!(v‚ÇÅ, g, fargs, args)    
      t = t+Œît
      (i % 1000 == 0) && println("Done t="*string(t))
    end                    
    plot!(plt, x, v‚ÇÅ[1:n+1], lc=:blue, lw=1, label="Approx. solution (v‚ÅΩ¬π‚Åæ) n="*string(n))    
    plot!(plt1, x, v‚ÇÅ[n+2:end], lc=:blue, lw=1, label="Approx. solution v‚ÅΩ¬≤‚Åæ n="*string(n))    
  end  
  vex = vec(reduce(vcat, v.(x,tf)))
  plot!(plt, x, vex[1:n+1], lc=:black, lw=2, label="Exact solution (v‚ÅΩ¬π‚Åæ)", ls=:dash)
  plot!(plt1, x, vex[n+2:end], lc=:black, lw=2, label="Exact solution (v‚ÅΩ¬≤‚Åæ)", ls=:dash)
end