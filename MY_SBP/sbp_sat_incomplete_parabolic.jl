##### ###### ###### ###### ###### ###### ###### ###### ######
## Refer Mattsson and Nordstrom, 2004
## Consider the incomplete parabolic system
##  v‚Çú + Cv‚Çì = Dv‚Çì‚Çì,  0<x<1, t>0
##    v(x,0) = f(x), 0<x<1, t=0
##    L‚ÇÄv = g‚ÇÄ(t), x=0, t>0
##    L‚ÇÅv = g‚ÇÅ(t), x=0, t>0
## Here C = [1 1; 1 -1], D = [0 0; 0 œµ], v = [v‚ÅΩ¬π‚Åæ, v‚ÅΩ¬≤‚Åæ]·µÄ
##### ###### ###### ###### ###### ###### ###### ###### ######


include("include.jl")

# Define the problem
const œµ = 1.0
const Œõ = @SMatrix [‚àö(2) 0; 0 -‚àö(2)]
const ùíü = œµ/(2‚àö(2))*(@SMatrix [‚àö(2)-1 1; 1 ‚àö(2)+1]) # which is DÃÉ in the paper, i.e., the diffusion tensor
const Œ± = ‚àö(2) - 1
# Some exact solution for testing
const w = 10.0
const b = 1.0
const c = 1.0
v(x,t) =  (@SVector [-sin(w*(x-c*t))*exp(-b*x), sin(w*(x+c*t))*exp(-b*x)])'

"""
Function to compute the boundary data at given time t:
Returns a tuple that corresponds to 
  (g‚ÇÄ(t), g‚ÇÅ(t))
"""
function BoundaryData(t)
  I‚ÇÄ = @SMatrix [1 0; 0 0];
  I‚ÇÅ = @SMatrix [0 0; 0 1];
  I‚ÇÇ = @SMatrix [1 0; 0 1];
  I·µ£ = @SMatrix [0 1; 1 0];
  v‚ÇÄ = @SVector [sin(w*c*t), sin(w*c*t)]
  ‚àÇ‚Çìv‚ÇÄ = @SVector [- b*sin(c*t*w) - w*cos(c*t*w), w*cos(c*t*w) - b*sin(c*t*w)]
  v‚ÇÅ = @SVector [-sin(w*(1-c*t))*exp(-b); sin(w*(1+c*t))*exp(-b)]
  ‚àÇ‚Çìv‚ÇÅ = @SVector [- b*exp(-b)*sin(w*(c*t - 1)) - w*exp(-b)*cos(w*(c*t - 1)), 
                  w*exp(-b)*cos(w*(c*t + 1)) - b*exp(-b)*sin(w*(c*t + 1))]

  (I‚ÇÄ*Œõ*v‚ÇÄ + (I‚ÇÅ - I‚ÇÄ)*ùíü*‚àÇ‚Çìv‚ÇÄ, I‚ÇÅ*Œõ*v‚ÇÅ + (I‚ÇÄ - (I‚ÇÇ+Œ±*I·µ£)*I‚ÇÅ)*ùíü*‚àÇ‚Çìv‚ÇÅ) # Return
end

"""
The non-zero forcing term in the RHS of the PDE
"""
function F(x,t)
  ‚àÇ‚Çúv = @SVector [c*w*cos(w*(x - c*t))*exp(-b*x), c*w*cos(w*(x + c*t))*exp(-b*x)]
  ‚àÇ‚Çìv = @SVector [b*sin(w*(x - c*t))*exp(-b*x) - w*cos(w*(x - c*t))*exp(-b*x), 
                  w*cos(w*(x + c*t))*exp(-b*x) - b*sin(w*(x + c*t))*exp(-b*x)]
  ‚àÇ‚Çì‚Çìv = @SVector [w^2*sin(w*(x - c*t))*exp(-b*x) - b^2*sin(w*(x - c*t))*exp(-b*x) + 2*b*w*cos(w*(x - c*t))*exp(-b*x), 
                   b^2*sin(w*(x + c*t))*exp(-b*x) - w^2*sin(w*(x + c*t))*exp(-b*x) - 2*b*w*cos(w*(x + c*t))*exp(-b*x)]
  (‚àÇ‚Çúv + Œõ*‚àÇ‚Çìv - ùíü*‚àÇ‚Çì‚Çìv)'
end

"""
Initial condition function
"""
V‚ÇÄ(x) = v(x,0)

"""
Fancy definition of the Kronecker product.
"""
‚äó(A, B) = Base.kron(A,B)

# Begin solving the problem
"""
RHS of the discrete time-stepping
"""
function g(t::Float64, v::AbstractVector{T}, F::AbstractVector{T}, kwargs) where T <: Number  
  sbp, pterms = kwargs
  Œ£‚ÇÄ, Œ£‚ÇÅ = pterms
  HHinv, D1, D2s, S, unit_vecs = sbp
  _, Hinv = HHinv  
  E‚ÇÄ, E‚Çô, e‚ÇÄ, e‚Çô, _ = unit_vecs
  D2, _ = D2s

  I‚ÇÄ = @SMatrix [1 0; 0 0];
  I‚ÇÅ = @SMatrix [0 0; 0 1];
  I‚ÇÇ = @SMatrix [1 0; 0 1];
  I·µ£ = @SMatrix [0 1; 1 0];
  L‚ÇÄ = (I‚ÇÄ*Œõ) ‚äó E‚ÇÄ + ((I‚ÇÅ - I‚ÇÄ)*ùíü) ‚äó (E‚ÇÄ*S)
  L‚ÇÅ = (I‚ÇÅ*Œõ) ‚äó E‚Çô + ((I‚ÇÄ - (I‚ÇÇ + Œ±*I·µ£)*I‚ÇÅ)*ùíü) ‚äó (E‚Çô*S)

  g‚ÇÄ, g‚ÇÅ = BoundaryData(t)

  -(Œõ ‚äó D1)*v + (ùíü ‚äó D2)*v + F + (Œ£‚ÇÄ ‚äó Hinv)*(L‚ÇÄ*v - g‚ÇÄ ‚äó e‚ÇÄ) + (Œ£‚ÇÅ ‚äó Hinv)*(L‚ÇÅ*v - g‚ÇÅ ‚äó e‚Çô) # Return
end


# Temporal Discretization parameters
Œît = 1e-5
tf = 1e-1
ntime = ceil(Int64,tf/Œît)
# Spatial discretization parameters
Œ£‚ÇÄ = [-1 0; 0 1];
Œ£‚ÇÅ = [-1 Œ±; 0 1];
pterms = Œ£‚ÇÄ, Œ£‚ÇÅ;
plt = plot()
plt1 = plot()
N = [30,60,90,120,150]
L¬≤Error = zeros(Float64,length(N))
for (n,i) ‚àà zip(N,1:length(N))
  let
    x = LinRange(0,1,n+1)
    sbp = SBP(n+1);
    H = sbp[1][1]; # Norm matrix for the l2error
    args = sbp, pterms
    let
      v‚ÇÄ = vec(reduce(vcat, V‚ÇÄ.(x)))
      global v‚ÇÅ = zero(v‚ÇÄ)  
      t = 0.0
      for i=1:ntime
        Fvec = vec(reduce(vcat, F.(x,t)))
        fargs = Œît, t, v‚ÇÄ, Fvec
        v‚ÇÄ = RK4!(v‚ÇÅ, g, fargs, args)    
        t = t+Œît
        (i % 1000 == 0) && println("Done t="*string(t))
      end  
      vex = vec(reduce(vcat, v.(x, t)))      
      e = vex - v‚ÇÅ
      HI = I(2) ‚äó H
      L¬≤Error[i] = sqrt(e'*HI*e)         
    end      
  end
  println("Done n = "*string(n))
  println(" ")
end

scatter!(plt, LinRange(0,1,N[end]+1), v‚ÇÅ[1:N[end]+1], label="Approx. solution (v‚ÅΩ¬π‚Åæ) n="*string(N[end]))    
scatter!(plt1, LinRange(0,1,N[end]+1), v‚ÇÅ[N[end]+2:end], label="Approx. solution v‚ÅΩ¬≤‚Åæ n="*string(N[end])) 
xplot = 0:0.01:1
vex = vec(reduce(vcat, v.(xplot,tf)))
plot!(plt, xplot, vex[1:length(xplot)], lc=:black, lw=2, label="Exact solution (v‚ÅΩ¬π‚Åæ)", ls=:dash)
plot!(plt1, xplot, vex[length(xplot)+1:end], lc=:black, lw=2, label="Exact solution (v‚ÅΩ¬≤‚Åæ)", ls=:dash)
rate = log.(L¬≤Error[2:end]./L¬≤Error[1:end-1])./(log.(N[1:end-1]./N[2:end]))